{"remainingRequest":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\ISG-InformX\\node_modules\\d3-voronoi\\src\\Beach.js","dependencies":[{"path":"D:\\ISG-InformX\\node_modules\\d3-voronoi\\src\\Beach.js","mtime":1562860465463},{"path":"D:\\ISG-InformX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1562860456543},{"path":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1562860430677}],"contextDependencies":[],"result":["import {RedBlackNode} from \"./RedBlackTree\";\r\nimport {createCell} from \"./Cell\";\r\nimport {attachCircle, detachCircle} from \"./Circle\";\r\nimport {createEdge, setEdgeEnd} from \"./Edge\";\r\nimport {beaches, epsilon} from \"./Diagram\";\r\n\r\nvar beachPool = [];\r\n\r\nfunction Beach() {\r\n  RedBlackNode(this);\r\n  this.edge =\r\n  this.site =\r\n  this.circle = null;\r\n}\r\n\r\nfunction createBeach(site) {\r\n  var beach = beachPool.pop() || new Beach;\r\n  beach.site = site;\r\n  return beach;\r\n}\r\n\r\nfunction detachBeach(beach) {\r\n  detachCircle(beach);\r\n  beaches.remove(beach);\r\n  beachPool.push(beach);\r\n  RedBlackNode(beach);\r\n}\r\n\r\nexport function removeBeach(beach) {\r\n  var circle = beach.circle,\r\n      x = circle.x,\r\n      y = circle.cy,\r\n      vertex = [x, y],\r\n      previous = beach.P,\r\n      next = beach.N,\r\n      disappearing = [beach];\r\n\r\n  detachBeach(beach);\r\n\r\n  var lArc = previous;\r\n  while (lArc.circle\r\n      && Math.abs(x - lArc.circle.x) < epsilon\r\n      && Math.abs(y - lArc.circle.cy) < epsilon) {\r\n    previous = lArc.P;\r\n    disappearing.unshift(lArc);\r\n    detachBeach(lArc);\r\n    lArc = previous;\r\n  }\r\n\r\n  disappearing.unshift(lArc);\r\n  detachCircle(lArc);\r\n\r\n  var rArc = next;\r\n  while (rArc.circle\r\n      && Math.abs(x - rArc.circle.x) < epsilon\r\n      && Math.abs(y - rArc.circle.cy) < epsilon) {\r\n    next = rArc.N;\r\n    disappearing.push(rArc);\r\n    detachBeach(rArc);\r\n    rArc = next;\r\n  }\r\n\r\n  disappearing.push(rArc);\r\n  detachCircle(rArc);\r\n\r\n  var nArcs = disappearing.length,\r\n      iArc;\r\n  for (iArc = 1; iArc < nArcs; ++iArc) {\r\n    rArc = disappearing[iArc];\r\n    lArc = disappearing[iArc - 1];\r\n    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\r\n  }\r\n\r\n  lArc = disappearing[0];\r\n  rArc = disappearing[nArcs - 1];\r\n  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\r\n\r\n  attachCircle(lArc);\r\n  attachCircle(rArc);\r\n}\r\n\r\nexport function addBeach(site) {\r\n  var x = site[0],\r\n      directrix = site[1],\r\n      lArc,\r\n      rArc,\r\n      dxl,\r\n      dxr,\r\n      node = beaches._;\r\n\r\n  while (node) {\r\n    dxl = leftBreakPoint(node, directrix) - x;\r\n    if (dxl > epsilon) node = node.L; else {\r\n      dxr = x - rightBreakPoint(node, directrix);\r\n      if (dxr > epsilon) {\r\n        if (!node.R) {\r\n          lArc = node;\r\n          break;\r\n        }\r\n        node = node.R;\r\n      } else {\r\n        if (dxl > -epsilon) {\r\n          lArc = node.P;\r\n          rArc = node;\r\n        } else if (dxr > -epsilon) {\r\n          lArc = node;\r\n          rArc = node.N;\r\n        } else {\r\n          lArc = rArc = node;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  createCell(site);\r\n  var newArc = createBeach(site);\r\n  beaches.insert(lArc, newArc);\r\n\r\n  if (!lArc && !rArc) return;\r\n\r\n  if (lArc === rArc) {\r\n    detachCircle(lArc);\r\n    rArc = createBeach(lArc.site);\r\n    beaches.insert(newArc, rArc);\r\n    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\r\n    attachCircle(lArc);\r\n    attachCircle(rArc);\r\n    return;\r\n  }\r\n\r\n  if (!rArc) { // && lArc\r\n    newArc.edge = createEdge(lArc.site, newArc.site);\r\n    return;\r\n  }\r\n\r\n  // else lArc !== rArc\r\n  detachCircle(lArc);\r\n  detachCircle(rArc);\r\n\r\n  var lSite = lArc.site,\r\n      ax = lSite[0],\r\n      ay = lSite[1],\r\n      bx = site[0] - ax,\r\n      by = site[1] - ay,\r\n      rSite = rArc.site,\r\n      cx = rSite[0] - ax,\r\n      cy = rSite[1] - ay,\r\n      d = 2 * (bx * cy - by * cx),\r\n      hb = bx * bx + by * by,\r\n      hc = cx * cx + cy * cy,\r\n      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\r\n\r\n  setEdgeEnd(rArc.edge, lSite, rSite, vertex);\r\n  newArc.edge = createEdge(lSite, site, null, vertex);\r\n  rArc.edge = createEdge(site, rSite, null, vertex);\r\n  attachCircle(lArc);\r\n  attachCircle(rArc);\r\n}\r\n\r\nfunction leftBreakPoint(arc, directrix) {\r\n  var site = arc.site,\r\n      rfocx = site[0],\r\n      rfocy = site[1],\r\n      pby2 = rfocy - directrix;\r\n\r\n  if (!pby2) return rfocx;\r\n\r\n  var lArc = arc.P;\r\n  if (!lArc) return -Infinity;\r\n\r\n  site = lArc.site;\r\n  var lfocx = site[0],\r\n      lfocy = site[1],\r\n      plby2 = lfocy - directrix;\r\n\r\n  if (!plby2) return lfocx;\r\n\r\n  var hl = lfocx - rfocx,\r\n      aby2 = 1 / pby2 - 1 / plby2,\r\n      b = hl / plby2;\r\n\r\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\r\n\r\n  return (rfocx + lfocx) / 2;\r\n}\r\n\r\nfunction rightBreakPoint(arc, directrix) {\r\n  var rArc = arc.N;\r\n  if (rArc) return leftBreakPoint(rArc, directrix);\r\n  var site = arc.site;\r\n  return site[1] === directrix ? site[0] : Infinity;\r\n}\r\n",null]}