{"remainingRequest":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\deployment-notification-cr\\node_modules\\d3-chord\\src\\chord.js","dependencies":[{"path":"F:\\deployment-notification-cr\\node_modules\\d3-chord\\src\\chord.js","mtime":1584689773638},{"path":"F:\\deployment-notification-cr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584689768230},{"path":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584689753517}],"contextDependencies":[],"result":["import {range} from \"d3-array\";\r\nimport {max, tau} from \"./math\";\r\n\r\nfunction compareValue(compare) {\r\n  return function(a, b) {\r\n    return compare(\r\n      a.source.value + a.target.value,\r\n      b.source.value + b.target.value\r\n    );\r\n  };\r\n}\r\n\r\nexport default function() {\r\n  var padAngle = 0,\r\n      sortGroups = null,\r\n      sortSubgroups = null,\r\n      sortChords = null;\r\n\r\n  function chord(matrix) {\r\n    var n = matrix.length,\r\n        groupSums = [],\r\n        groupIndex = range(n),\r\n        subgroupIndex = [],\r\n        chords = [],\r\n        groups = chords.groups = new Array(n),\r\n        subgroups = new Array(n * n),\r\n        k,\r\n        x,\r\n        x0,\r\n        dx,\r\n        i,\r\n        j;\r\n\r\n    // Compute the sum.\r\n    k = 0, i = -1; while (++i < n) {\r\n      x = 0, j = -1; while (++j < n) {\r\n        x += matrix[i][j];\r\n      }\r\n      groupSums.push(x);\r\n      subgroupIndex.push(range(n));\r\n      k += x;\r\n    }\r\n\r\n    // Sort groups…\r\n    if (sortGroups) groupIndex.sort(function(a, b) {\r\n      return sortGroups(groupSums[a], groupSums[b]);\r\n    });\r\n\r\n    // Sort subgroups…\r\n    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {\r\n      d.sort(function(a, b) {\r\n        return sortSubgroups(matrix[i][a], matrix[i][b]);\r\n      });\r\n    });\r\n\r\n    // Convert the sum to scaling factor for [0, 2pi].\r\n    // TODO Allow start and end angle to be specified?\r\n    // TODO Allow padding to be specified as percentage?\r\n    k = max(0, tau - padAngle * n) / k;\r\n    dx = k ? padAngle : tau / n;\r\n\r\n    // Compute the start and end angle for each group and subgroup.\r\n    // Note: Opera has a bug reordering object literal properties!\r\n    x = 0, i = -1; while (++i < n) {\r\n      x0 = x, j = -1; while (++j < n) {\r\n        var di = groupIndex[i],\r\n            dj = subgroupIndex[di][j],\r\n            v = matrix[di][dj],\r\n            a0 = x,\r\n            a1 = x += v * k;\r\n        subgroups[dj * n + di] = {\r\n          index: di,\r\n          subindex: dj,\r\n          startAngle: a0,\r\n          endAngle: a1,\r\n          value: v\r\n        };\r\n      }\r\n      groups[di] = {\r\n        index: di,\r\n        startAngle: x0,\r\n        endAngle: x,\r\n        value: groupSums[di]\r\n      };\r\n      x += dx;\r\n    }\r\n\r\n    // Generate chords for each (non-empty) subgroup-subgroup link.\r\n    i = -1; while (++i < n) {\r\n      j = i - 1; while (++j < n) {\r\n        var source = subgroups[j * n + i],\r\n            target = subgroups[i * n + j];\r\n        if (source.value || target.value) {\r\n          chords.push(source.value < target.value\r\n              ? {source: target, target: source}\r\n              : {source: source, target: target});\r\n        }\r\n      }\r\n    }\r\n\r\n    return sortChords ? chords.sort(sortChords) : chords;\r\n  }\r\n\r\n  chord.padAngle = function(_) {\r\n    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;\r\n  };\r\n\r\n  chord.sortGroups = function(_) {\r\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\r\n  };\r\n\r\n  chord.sortSubgroups = function(_) {\r\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\r\n  };\r\n\r\n  chord.sortChords = function(_) {\r\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\r\n  };\r\n\r\n  return chord;\r\n}\r\n",null]}