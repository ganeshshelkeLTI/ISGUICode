{"remainingRequest":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\deployment-notification-cr\\node_modules\\d3-contour\\src\\contours.js","dependencies":[{"path":"F:\\deployment-notification-cr\\node_modules\\d3-contour\\src\\contours.js","mtime":1584689774307},{"path":"F:\\deployment-notification-cr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584689768230},{"path":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584689753517}],"contextDependencies":[],"result":["import {extent, thresholdSturges, tickStep, range} from \"d3-array\";\r\nimport {slice} from \"./array\";\r\nimport ascending from \"./ascending\";\r\nimport area from \"./area\";\r\nimport constant from \"./constant\";\r\nimport contains from \"./contains\";\r\nimport noop from \"./noop\";\r\n\r\nvar cases = [\r\n  [],\r\n  [[[1.0, 1.5], [0.5, 1.0]]],\r\n  [[[1.5, 1.0], [1.0, 1.5]]],\r\n  [[[1.5, 1.0], [0.5, 1.0]]],\r\n  [[[1.0, 0.5], [1.5, 1.0]]],\r\n  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\r\n  [[[1.0, 0.5], [1.0, 1.5]]],\r\n  [[[1.0, 0.5], [0.5, 1.0]]],\r\n  [[[0.5, 1.0], [1.0, 0.5]]],\r\n  [[[1.0, 1.5], [1.0, 0.5]]],\r\n  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\r\n  [[[1.5, 1.0], [1.0, 0.5]]],\r\n  [[[0.5, 1.0], [1.5, 1.0]]],\r\n  [[[1.0, 1.5], [1.5, 1.0]]],\r\n  [[[0.5, 1.0], [1.0, 1.5]]],\r\n  []\r\n];\r\n\r\nexport default function() {\r\n  var dx = 1,\r\n      dy = 1,\r\n      threshold = thresholdSturges,\r\n      smooth = smoothLinear;\r\n\r\n  function contours(values) {\r\n    var tz = threshold(values);\r\n\r\n    // Convert number of thresholds into uniform thresholds.\r\n    if (!Array.isArray(tz)) {\r\n      var domain = extent(values), start = domain[0], stop = domain[1];\r\n      tz = tickStep(start, stop, tz);\r\n      tz = range(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);\r\n    } else {\r\n      tz = tz.slice().sort(ascending);\r\n    }\r\n\r\n    return tz.map(function(value) {\r\n      return contour(values, value);\r\n    });\r\n  }\r\n\r\n  // Accumulate, smooth contour rings, assign holes to exterior rings.\r\n  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\r\n  function contour(values, value) {\r\n    var polygons = [],\r\n        holes = [];\r\n\r\n    isorings(values, value, function(ring) {\r\n      smooth(ring, values, value);\r\n      if (area(ring) > 0) polygons.push([ring]);\r\n      else holes.push(ring);\r\n    });\r\n\r\n    holes.forEach(function(hole) {\r\n      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\r\n        if (contains((polygon = polygons[i])[0], hole) !== -1) {\r\n          polygon.push(hole);\r\n          return;\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      type: \"MultiPolygon\",\r\n      value: value,\r\n      coordinates: polygons\r\n    };\r\n  }\r\n\r\n  // Marching squares with isolines stitched into rings.\r\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\r\n  function isorings(values, value, callback) {\r\n    var fragmentByStart = new Array,\r\n        fragmentByEnd = new Array,\r\n        x, y, t0, t1, t2, t3;\r\n\r\n    // Special case for the first row (y = -1, t2 = t3 = 0).\r\n    x = y = -1;\r\n    t1 = values[0] >= value;\r\n    cases[t1 << 1].forEach(stitch);\r\n    while (++x < dx - 1) {\r\n      t0 = t1, t1 = values[x + 1] >= value;\r\n      cases[t0 | t1 << 1].forEach(stitch);\r\n    }\r\n    cases[t1 << 0].forEach(stitch);\r\n\r\n    // General case for the intermediate rows.\r\n    while (++y < dy - 1) {\r\n      x = -1;\r\n      t1 = values[y * dx + dx] >= value;\r\n      t2 = values[y * dx] >= value;\r\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\r\n      while (++x < dx - 1) {\r\n        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\r\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\r\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\r\n      }\r\n      cases[t1 | t2 << 3].forEach(stitch);\r\n    }\r\n\r\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\r\n    x = -1;\r\n    t2 = values[y * dx] >= value;\r\n    cases[t2 << 2].forEach(stitch);\r\n    while (++x < dx - 1) {\r\n      t3 = t2, t2 = values[y * dx + x + 1] >= value;\r\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\r\n    }\r\n    cases[t2 << 3].forEach(stitch);\r\n\r\n    function stitch(line) {\r\n      var start = [line[0][0] + x, line[0][1] + y],\r\n          end = [line[1][0] + x, line[1][1] + y],\r\n          startIndex = index(start),\r\n          endIndex = index(end),\r\n          f, g;\r\n      if (f = fragmentByEnd[startIndex]) {\r\n        if (g = fragmentByStart[endIndex]) {\r\n          delete fragmentByEnd[f.end];\r\n          delete fragmentByStart[g.start];\r\n          if (f === g) {\r\n            f.ring.push(end);\r\n            callback(f.ring);\r\n          } else {\r\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\r\n          }\r\n        } else {\r\n          delete fragmentByEnd[f.end];\r\n          f.ring.push(end);\r\n          fragmentByEnd[f.end = endIndex] = f;\r\n        }\r\n      } else if (f = fragmentByStart[endIndex]) {\r\n        if (g = fragmentByEnd[startIndex]) {\r\n          delete fragmentByStart[f.start];\r\n          delete fragmentByEnd[g.end];\r\n          if (f === g) {\r\n            f.ring.push(end);\r\n            callback(f.ring);\r\n          } else {\r\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\r\n          }\r\n        } else {\r\n          delete fragmentByStart[f.start];\r\n          f.ring.unshift(start);\r\n          fragmentByStart[f.start = startIndex] = f;\r\n        }\r\n      } else {\r\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\r\n      }\r\n    }\r\n  }\r\n\r\n  function index(point) {\r\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\r\n  }\r\n\r\n  function smoothLinear(ring, values, value) {\r\n    ring.forEach(function(point) {\r\n      var x = point[0],\r\n          y = point[1],\r\n          xt = x | 0,\r\n          yt = y | 0,\r\n          v0,\r\n          v1 = values[yt * dx + xt];\r\n      if (x > 0 && x < dx && xt === x) {\r\n        v0 = values[yt * dx + xt - 1];\r\n        point[0] = x + (value - v0) / (v1 - v0) - 0.5;\r\n      }\r\n      if (y > 0 && y < dy && yt === y) {\r\n        v0 = values[(yt - 1) * dx + xt];\r\n        point[1] = y + (value - v0) / (v1 - v0) - 0.5;\r\n      }\r\n    });\r\n  }\r\n\r\n  contours.contour = contour;\r\n\r\n  contours.size = function(_) {\r\n    if (!arguments.length) return [dx, dy];\r\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\r\n    if (!(_0 > 0) || !(_1 > 0)) throw new Error(\"invalid size\");\r\n    return dx = _0, dy = _1, contours;\r\n  };\r\n\r\n  contours.thresholds = function(_) {\r\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;\r\n  };\r\n\r\n  contours.smooth = function(_) {\r\n    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;\r\n  };\r\n\r\n  return contours;\r\n}\r\n",null]}