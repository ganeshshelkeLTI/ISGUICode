{"remainingRequest":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\InformXUI\\node_modules\\@okta\\okta-auth-js\\lib\\crypto.js","dependencies":[{"path":"D:\\InformXUI\\node_modules\\@okta\\okta-auth-js\\lib\\crypto.js","mtime":1561962764625},{"path":"D:\\InformXUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561962767981},{"path":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1561962756102}],"contextDependencies":[],"result":["/*!\r\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\r\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\r\n *\r\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and limitations under the License.\r\n */\r\n\r\nvar util = require('./util');\r\n\r\nfunction verifyToken(idToken, key) {\r\n  key = util.clone(key);\r\n\r\n  var format = 'jwk';\r\n  var algo = {\r\n    name: 'RSASSA-PKCS1-v1_5',\r\n    hash: { name: 'SHA-256' }\r\n  };\r\n  var extractable = true;\r\n  var usages = ['verify'];\r\n\r\n  // https://connect.microsoft.com/IE/feedback/details/2242108/webcryptoapi-importing-jwk-with-use-field-fails\r\n  // This is a metadata tag that specifies the intent of how the key should be used.\r\n  // It's not necessary to properly verify the jwt's signature.\r\n  delete key.use;\r\n\r\n  return crypto.subtle.importKey(\r\n    format,\r\n    key,\r\n    algo,\r\n    extractable,\r\n    usages\r\n  )\r\n  .then(function(cryptoKey) {\r\n    var jwt = idToken.split('.');\r\n    var payload = util.stringToBuffer(jwt[0] + '.' + jwt[1]);\r\n    var b64Signature = util.base64UrlDecode(jwt[2]);\r\n    var signature = util.stringToBuffer(b64Signature);\r\n\r\n    return crypto.subtle.verify(\r\n      algo,\r\n      cryptoKey,\r\n      signature,\r\n      payload\r\n    );\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  verifyToken: verifyToken\r\n};\r\n",null]}