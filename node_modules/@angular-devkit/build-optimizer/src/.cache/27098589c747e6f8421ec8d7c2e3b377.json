{"remainingRequest":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\deployment-notification-cr\\node_modules\\d3-scale\\src\\diverging.js","dependencies":[{"path":"F:\\deployment-notification-cr\\node_modules\\d3-scale\\src\\diverging.js","mtime":1584689775094},{"path":"F:\\deployment-notification-cr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584689768230},{"path":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584689753517}],"contextDependencies":[],"result":["import {linearish} from \"./linear\";\r\n\r\nexport default function diverging(interpolator) {\r\n  var x0 = 0,\r\n      x1 = 0.5,\r\n      x2 = 1,\r\n      k10 = 1,\r\n      k21 = 1,\r\n      clamp = false;\r\n\r\n  function scale(x) {\r\n    var t = 0.5 + ((x = +x) - x1) * (x < x1 ? k10 : k21);\r\n    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);\r\n  }\r\n\r\n  scale.domain = function(_) {\r\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], x2 = +_[2], k10 = x0 === x1 ? 0 : 0.5 / (x1 - x0), k21 = x1 === x2 ? 0 : 0.5 / (x2 - x1), scale) : [x0, x1, x2];\r\n  };\r\n\r\n  scale.clamp = function(_) {\r\n    return arguments.length ? (clamp = !!_, scale) : clamp;\r\n  };\r\n\r\n  scale.interpolator = function(_) {\r\n    return arguments.length ? (interpolator = _, scale) : interpolator;\r\n  };\r\n\r\n  scale.copy = function() {\r\n    return diverging(interpolator).domain([x0, x1, x2]).clamp(clamp);\r\n  };\r\n\r\n  return linearish(scale);\r\n}\r\n",null]}