{"remainingRequest":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\ISG-InformX\\node_modules\\d3-contour\\src\\contains.js","dependencies":[{"path":"D:\\ISG-InformX\\node_modules\\d3-contour\\src\\contains.js","mtime":1562860464370},{"path":"D:\\ISG-InformX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1562860456543},{"path":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1562860430677}],"contextDependencies":[],"result":["export default function(ring, hole) {\r\n  var i = -1, n = hole.length, c;\r\n  while (++i < n) if (c = ringContains(ring, hole[i])) return c;\r\n  return 0;\r\n}\r\n\r\nfunction ringContains(ring, point) {\r\n  var x = point[0], y = point[1], contains = -1;\r\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\r\n    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\r\n    if (segmentContains(pi, pj, point)) return 0;\r\n    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\r\n  }\r\n  return contains;\r\n}\r\n\r\nfunction segmentContains(a, b, c) {\r\n  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\r\n}\r\n\r\nfunction collinear(a, b, c) {\r\n  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\r\n}\r\n\r\nfunction within(p, q, r) {\r\n  return p <= q && q <= r || r <= q && q <= p;\r\n}\r\n",null]}