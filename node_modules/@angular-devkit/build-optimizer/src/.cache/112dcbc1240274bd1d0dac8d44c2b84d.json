{"remainingRequest":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\deployment-notification-cr\\node_modules\\d3-dsv\\src\\dsv.js","dependencies":[{"path":"F:\\deployment-notification-cr\\node_modules\\d3-dsv\\src\\dsv.js","mtime":1584689774369},{"path":"F:\\deployment-notification-cr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584689768230},{"path":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584689753517}],"contextDependencies":[],"result":["var EOL = {},\r\n    EOF = {},\r\n    QUOTE = 34,\r\n    NEWLINE = 10,\r\n    RETURN = 13;\r\n\r\nfunction objectConverter(columns) {\r\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\r\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\r\n  }).join(\",\") + \"}\");\r\n}\r\n\r\nfunction customConverter(columns, f) {\r\n  var object = objectConverter(columns);\r\n  return function(row, i) {\r\n    return f(object(row), i, columns);\r\n  };\r\n}\r\n\r\n// Compute unique columns in order of discovery.\r\nfunction inferColumns(rows) {\r\n  var columnSet = Object.create(null),\r\n      columns = [];\r\n\r\n  rows.forEach(function(row) {\r\n    for (var column in row) {\r\n      if (!(column in columnSet)) {\r\n        columns.push(columnSet[column] = column);\r\n      }\r\n    }\r\n  });\r\n\r\n  return columns;\r\n}\r\n\r\nexport default function(delimiter) {\r\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\r\n      DELIMITER = delimiter.charCodeAt(0);\r\n\r\n  function parse(text, f) {\r\n    var convert, columns, rows = parseRows(text, function(row, i) {\r\n      if (convert) return convert(row, i - 1);\r\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\r\n    });\r\n    rows.columns = columns || [];\r\n    return rows;\r\n  }\r\n\r\n  function parseRows(text, f) {\r\n    var rows = [], // output rows\r\n        N = text.length,\r\n        I = 0, // current character index\r\n        n = 0, // current line number\r\n        t, // current token\r\n        eof = N <= 0, // current token followed by EOF?\r\n        eol = false; // current token followed by EOL?\r\n\r\n    // Strip the trailing newline.\r\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\r\n    if (text.charCodeAt(N - 1) === RETURN) --N;\r\n\r\n    function token() {\r\n      if (eof) return EOF;\r\n      if (eol) return eol = false, EOL;\r\n\r\n      // Unescape quotes.\r\n      var i, j = I, c;\r\n      if (text.charCodeAt(j) === QUOTE) {\r\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\r\n        if ((i = I) >= N) eof = true;\r\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\r\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\r\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\r\n      }\r\n\r\n      // Find next delimiter or newline.\r\n      while (I < N) {\r\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\r\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\r\n        else if (c !== DELIMITER) continue;\r\n        return text.slice(j, i);\r\n      }\r\n\r\n      // Return last token before EOF.\r\n      return eof = true, text.slice(j, N);\r\n    }\r\n\r\n    while ((t = token()) !== EOF) {\r\n      var row = [];\r\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\r\n      if (f && (row = f(row, n++)) == null) continue;\r\n      rows.push(row);\r\n    }\r\n\r\n    return rows;\r\n  }\r\n\r\n  function format(rows, columns) {\r\n    if (columns == null) columns = inferColumns(rows);\r\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\r\n      return columns.map(function(column) {\r\n        return formatValue(row[column]);\r\n      }).join(delimiter);\r\n    })).join(\"\\n\");\r\n  }\r\n\r\n  function formatRows(rows) {\r\n    return rows.map(formatRow).join(\"\\n\");\r\n  }\r\n\r\n  function formatRow(row) {\r\n    return row.map(formatValue).join(delimiter);\r\n  }\r\n\r\n  function formatValue(text) {\r\n    return text == null ? \"\"\r\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\r\n        : text;\r\n  }\r\n\r\n  return {\r\n    parse: parse,\r\n    parseRows: parseRows,\r\n    format: format,\r\n    formatRows: formatRows\r\n  };\r\n}\r\n",null]}