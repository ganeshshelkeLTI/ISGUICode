{"remainingRequest":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\ISG-InformX\\node_modules\\@okta\\okta-auth-js\\lib\\browser\\browser.js","dependencies":[{"path":"D:\\ISG-InformX\\node_modules\\@okta\\okta-auth-js\\lib\\browser\\browser.js","mtime":1562860445785},{"path":"D:\\ISG-InformX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1562860456543},{"path":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1562860430677}],"contextDependencies":[],"result":["/*!\r\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\r\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\r\n *\r\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and limitations under the License.\r\n */\r\n/* eslint-disable complexity */\r\n/* eslint-disable max-statements */\r\n\r\nrequire('../vendor/polyfills');\r\n\r\nvar AuthSdkError      = require('../errors/AuthSdkError');\r\nvar builderUtil       = require('../builderUtil');\r\nvar config            = require('../config');\r\nvar cookies           = require('./browserStorage').storage;\r\nvar http              = require('../http');\r\nvar oauthUtil         = require('../oauthUtil');\r\nvar Q                 = require('q');\r\nvar session           = require('../session');\r\nvar token             = require('../token');\r\nvar TokenManager      = require('../TokenManager');\r\nvar tx                = require('../tx');\r\nvar util              = require('../util');\r\n\r\nfunction OktaAuthBuilder(args) {\r\n  var sdk = this;\r\n\r\n  var url = builderUtil.getValidUrl(args);\r\n  this.options = {\r\n    url: util.removeTrailingSlash(url),\r\n    clientId: args.clientId,\r\n    issuer: util.removeTrailingSlash(args.issuer),\r\n    authorizeUrl: util.removeTrailingSlash(args.authorizeUrl),\r\n    userinfoUrl: util.removeTrailingSlash(args.userinfoUrl),\r\n    redirectUri: args.redirectUri,\r\n    httpRequestClient: args.httpRequestClient,\r\n    storageUtil: args.storageUtil,\r\n    transformErrorXHR: args.transformErrorXHR,\r\n    headers: args.headers\r\n  };\r\n\r\n  this.userAgent = 'okta-auth-js-' + config.SDK_VERSION;\r\n\r\n  // Digital clocks will drift over time, so the server\r\n  // can misalign with the time reported by the browser.\r\n  // The maxClockSkew allows relaxing the time-based\r\n  // validation of tokens (in seconds, not milliseconds).\r\n  // It currently defaults to 300, because 5 min is the\r\n  // default maximum tolerance allowed by Kerberos.\r\n  // (https://technet.microsoft.com/en-us/library/cc976357.aspx)\r\n  if (!args.maxClockSkew && args.maxClockSkew !== 0) {\r\n    this.options.maxClockSkew = config.DEFAULT_MAX_CLOCK_SKEW;\r\n  } else {\r\n    this.options.maxClockSkew = args.maxClockSkew;\r\n  }\r\n\r\n  // Give the developer the ability to disable token signature\r\n  // validation.\r\n  this.options.ignoreSignature = !!args.ignoreSignature;\r\n\r\n  sdk.session = {\r\n    close: util.bind(session.closeSession, null, sdk),\r\n    exists: util.bind(session.sessionExists, null, sdk),\r\n    get: util.bind(session.getSession, null, sdk),\r\n    refresh: util.bind(session.refreshSession, null, sdk),\r\n    setCookieAndRedirect: util.bind(session.setCookieAndRedirect, null, sdk)\r\n  };\r\n\r\n  sdk.tx = {\r\n    status: util.bind(tx.transactionStatus, null, sdk),\r\n    resume: util.bind(tx.resumeTransaction, null, sdk),\r\n    exists: util.bind(tx.transactionExists, null, sdk)\r\n  };\r\n\r\n  // This is exposed so we can mock document.cookie in our tests\r\n  sdk.tx.exists._get = function(name) {\r\n    return cookies.get(name);\r\n  };\r\n\r\n  // This is exposed so we can mock window.location.href in our tests\r\n  sdk.idToken = {\r\n    authorize: {\r\n      _getLocationHref: function() {\r\n        return window.location.href;\r\n      }\r\n    }\r\n  };\r\n\r\n  sdk.token = {\r\n    getWithoutPrompt: util.bind(token.getWithoutPrompt, null, sdk),\r\n    getWithPopup: util.bind(token.getWithPopup, null, sdk),\r\n    getWithRedirect: util.bind(token.getWithRedirect, null, sdk),\r\n    parseFromUrl: util.bind(token.parseFromUrl, null, sdk),\r\n    decode: token.decodeToken,\r\n    renew: util.bind(token.renewToken, null, sdk),\r\n    getUserInfo: util.bind(token.getUserInfo, null, sdk),\r\n    verify: util.bind(token.verifyToken, null, sdk)\r\n  };\r\n\r\n  // This is exposed so we can set window.location in our tests\r\n  sdk.token.getWithRedirect._setLocation = function(url) {\r\n    window.location = url;\r\n  };\r\n\r\n  // This is exposed so we can mock getting window.history in our tests\r\n  sdk.token.parseFromUrl._getHistory = function() {\r\n    return window.history;\r\n  };\r\n\r\n  // This is exposed so we can mock getting window.location in our tests\r\n  sdk.token.parseFromUrl._getLocation = function() {\r\n    return window.location;\r\n  };\r\n\r\n  // This is exposed so we can mock getting window.document in our tests\r\n  sdk.token.parseFromUrl._getDocument = function() {\r\n    return window.document;\r\n  };\r\n\r\n  sdk.fingerprint._getUserAgent = function() {\r\n    return navigator.userAgent;\r\n  };\r\n\r\n  var isWindowsPhone = /windows phone|iemobile|wpdesktop/i;\r\n  sdk.features.isFingerprintSupported = function() {\r\n    var agent = sdk.fingerprint._getUserAgent();\r\n    return agent && !isWindowsPhone.test(agent);\r\n  };\r\n\r\n  sdk.tokenManager = new TokenManager(sdk, args.tokenManager);\r\n}\r\n\r\nvar proto = OktaAuthBuilder.prototype;\r\n\r\nproto.features = {};\r\n\r\nproto.features.isPopupPostMessageSupported = function() {\r\n  var isIE8or9 = document.documentMode && document.documentMode < 10;\r\n  if (window.postMessage && !isIE8or9) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nproto.features.isTokenVerifySupported = function() {\r\n  return typeof crypto !== 'undefined' && crypto.subtle && typeof Uint8Array !== 'undefined';\r\n};\r\n\r\n// { username, password, (relayState), (context) }\r\nproto.signIn = function (opts) {\r\n  var sdk = this;\r\n  opts = util.clone(opts || {});\r\n  function postToTransaction(options) {\r\n    delete opts.sendFingerprint;\r\n    return tx.postToTransaction(sdk, '/api/v1/authn', opts, options);\r\n  }\r\n  if (!opts.sendFingerprint) {\r\n    return postToTransaction();\r\n  }\r\n  return sdk.fingerprint()\r\n  .then(function(fingerprint) {\r\n    return postToTransaction({\r\n      headers: {\r\n        'X-Device-Fingerprint': fingerprint\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nproto.signOut = function () {\r\n  return this.session.close();\r\n};\r\n\r\nbuilderUtil.addSharedPrototypes(proto);\r\n\r\n// { resource, (rel), (requestContext)}\r\nproto.webfinger = function (opts) {\r\n  var url = '/.well-known/webfinger' + util.toQueryParams(opts);\r\n  var options = {\r\n    headers: {\r\n      'Accept': 'application/jrd+json'\r\n    }\r\n  };\r\n  return http.get(this, url, options);\r\n};\r\n\r\nproto.fingerprint = function(options) {\r\n  options = options || {};\r\n  var sdk = this;\r\n  if (!sdk.features.isFingerprintSupported()) {\r\n    return Q.reject(new AuthSdkError('Fingerprinting is not supported on this device'));\r\n  }\r\n\r\n  var deferred = Q.defer();\r\n\r\n  var iframe = document.createElement('iframe');\r\n  iframe.style.display = 'none';\r\n\r\n  function listener(e) {\r\n    if (!e || !e.data || e.origin !== sdk.options.url) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      var msg = JSON.parse(e.data);\r\n    } catch (err) {\r\n      return deferred.reject(new AuthSdkError('Unable to parse iframe response'));\r\n    }\r\n\r\n    if (!msg) { return; }\r\n    if (msg.type === 'FingerprintAvailable') {\r\n      return deferred.resolve(msg.fingerprint);\r\n    }\r\n    if (msg.type === 'FingerprintServiceReady') {\r\n      e.source.postMessage(JSON.stringify({\r\n        type: 'GetFingerprint'\r\n      }), e.origin);\r\n    }\r\n  }\r\n  oauthUtil.addListener(window, 'message', listener);\r\n\r\n  iframe.src = sdk.options.url + '/auth/services/devicefingerprint';\r\n  document.body.appendChild(iframe);\r\n\r\n  var timeout = setTimeout(function() {\r\n    deferred.reject(new AuthSdkError('Fingerprinting timed out'));\r\n  }, options.timeout || 15000);\r\n\r\n  return deferred.promise.fin(function() {\r\n    clearTimeout(timeout);\r\n    oauthUtil.removeListener(window, 'message', listener);\r\n    if (document.body.contains(iframe)) {\r\n      iframe.parentElement.removeChild(iframe);\r\n    }\r\n  });\r\n};\r\n\r\nmodule.exports = builderUtil.buildOktaAuth(OktaAuthBuilder);\r\n",null]}