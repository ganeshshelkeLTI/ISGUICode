{"remainingRequest":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\InformXUI\\node_modules\\Base64\\base64.js","dependencies":[{"path":"D:\\InformXUI\\node_modules\\Base64\\base64.js","mtime":1561962765469},{"path":"D:\\InformXUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561962767981},{"path":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1561962756102}],"contextDependencies":[],"result":[";(function () {\r\n\r\n  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers\r\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n\r\n  function InvalidCharacterError(message) {\r\n    this.message = message;\r\n  }\r\n  InvalidCharacterError.prototype = new Error;\r\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\r\n\r\n  // encoder\r\n  // [https://gist.github.com/999166] by [https://github.com/nignag]\r\n  object.btoa || (\r\n  object.btoa = function (input) {\r\n    var str = String(input);\r\n    for (\r\n      // initialize result and counter\r\n      var block, charCode, idx = 0, map = chars, output = '';\r\n      // if the next str index does not exist:\r\n      //   change the mapping table to \"=\"\r\n      //   check if d has no fractional digits\r\n      str.charAt(idx | 0) || (map = '=', idx % 1);\r\n      // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\r\n      output += map.charAt(63 & block >> 8 - idx % 1 * 8)\r\n    ) {\r\n      charCode = str.charCodeAt(idx += 3/4);\r\n      if (charCode > 0xFF) {\r\n        throw new InvalidCharacterError(\"'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.\");\r\n      }\r\n      block = block << 8 | charCode;\r\n    }\r\n    return output;\r\n  });\r\n\r\n  // decoder\r\n  // [https://gist.github.com/1020396] by [https://github.com/atk]\r\n  object.atob || (\r\n  object.atob = function (input) {\r\n    var str = String(input).replace(/=+$/, '');\r\n    if (str.length % 4 == 1) {\r\n      throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\r\n    }\r\n    for (\r\n      // initialize result and counters\r\n      var bc = 0, bs, buffer, idx = 0, output = '';\r\n      // get next character\r\n      buffer = str.charAt(idx++);\r\n      // character found in table? initialize bit storage and add its ascii value;\r\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\r\n        // and if not first of each 4 characters,\r\n        // convert the first 8 bits to one ascii character\r\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\r\n    ) {\r\n      // try to find character in table (0-63, not found => -1)\r\n      buffer = chars.indexOf(buffer);\r\n    }\r\n    return output;\r\n  });\r\n\r\n}());\r\n",null]}