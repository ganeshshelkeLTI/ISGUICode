{"remainingRequest":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\InformXUI\\node_modules\\d3-geo\\src\\rotation.js","dependencies":[{"path":"D:\\InformXUI\\node_modules\\d3-geo\\src\\rotation.js","mtime":1561962771607},{"path":"D:\\InformXUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561962767981},{"path":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1561962756102}],"contextDependencies":[],"result":["import compose from \"./compose\";\r\nimport {asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math\";\r\n\r\nfunction rotationIdentity(lambda, phi) {\r\n  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\r\n}\r\n\r\nrotationIdentity.invert = rotationIdentity;\r\n\r\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\r\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\r\n    : rotationLambda(deltaLambda))\r\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\r\n    : rotationIdentity);\r\n}\r\n\r\nfunction forwardRotationLambda(deltaLambda) {\r\n  return function(lambda, phi) {\r\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\r\n  };\r\n}\r\n\r\nfunction rotationLambda(deltaLambda) {\r\n  var rotation = forwardRotationLambda(deltaLambda);\r\n  rotation.invert = forwardRotationLambda(-deltaLambda);\r\n  return rotation;\r\n}\r\n\r\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\r\n  var cosDeltaPhi = cos(deltaPhi),\r\n      sinDeltaPhi = sin(deltaPhi),\r\n      cosDeltaGamma = cos(deltaGamma),\r\n      sinDeltaGamma = sin(deltaGamma);\r\n\r\n  function rotation(lambda, phi) {\r\n    var cosPhi = cos(phi),\r\n        x = cos(lambda) * cosPhi,\r\n        y = sin(lambda) * cosPhi,\r\n        z = sin(phi),\r\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\r\n    return [\r\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\r\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\r\n    ];\r\n  }\r\n\r\n  rotation.invert = function(lambda, phi) {\r\n    var cosPhi = cos(phi),\r\n        x = cos(lambda) * cosPhi,\r\n        y = sin(lambda) * cosPhi,\r\n        z = sin(phi),\r\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\r\n    return [\r\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\r\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\r\n    ];\r\n  };\r\n\r\n  return rotation;\r\n}\r\n\r\nexport default function(rotate) {\r\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\r\n\r\n  function forward(coordinates) {\r\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\r\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\r\n  }\r\n\r\n  forward.invert = function(coordinates) {\r\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\r\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\r\n  };\r\n\r\n  return forward;\r\n}\r\n",null]}