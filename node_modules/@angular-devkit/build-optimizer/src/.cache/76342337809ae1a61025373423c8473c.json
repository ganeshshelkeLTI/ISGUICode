{"remainingRequest":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\deployment-notification-cr\\node_modules\\@okta\\okta-auth-js\\lib\\session.js","dependencies":[{"path":"F:\\deployment-notification-cr\\node_modules\\@okta\\okta-auth-js\\lib\\session.js","mtime":1584689763355},{"path":"F:\\deployment-notification-cr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584689768230},{"path":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584689753517}],"contextDependencies":[],"result":["/*!\r\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\r\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\r\n *\r\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and limitations under the License.\r\n *\r\n */\r\n\r\nvar util = require('./util');\r\nvar http = require('./http');\r\n\r\nfunction sessionExists(sdk) {\r\n  return sdk.session.get()\r\n    .then(function(res) {\r\n      if (res.status === 'ACTIVE') {\r\n        return true;\r\n      }\r\n      return false;\r\n    })\r\n    .fail(function() {\r\n      return false;\r\n    });\r\n}\r\n\r\nfunction getSession(sdk) { \r\n  return http.get(sdk, '/api/v1/sessions/me')\r\n  .then(function(session) {\r\n    var res = util.omit(session, '_links');\r\n\r\n    res.refresh = function() {\r\n      return http.post(sdk, util.getLink(session, 'refresh').href);\r\n    };\r\n\r\n    res.user = function() {\r\n      return http.get(sdk, util.getLink(session, 'user').href);\r\n    };\r\n\r\n    return res;\r\n  })\r\n  .fail(function() {\r\n    // Return INACTIVE status on failure\r\n    return {status: 'INACTIVE'};\r\n  });\r\n}\r\n\r\nfunction closeSession(sdk) {\r\n  return http.httpRequest(sdk, {\r\n    url: sdk.options.url + '/api/v1/sessions/me',\r\n    method: 'DELETE'\r\n  });\r\n}\r\n\r\nfunction refreshSession(sdk) {\r\n  return http.post(sdk, '/api/v1/sessions/me/lifecycle/refresh');\r\n}\r\n\r\nfunction setCookieAndRedirect(sdk, sessionToken, redirectUrl) {\r\n  redirectUrl = redirectUrl || window.location.href;\r\n  window.location = sdk.options.url + '/login/sessionCookieRedirect' +\r\n    util.toQueryParams({\r\n      checkAccountSetupComplete: true,\r\n      token: sessionToken,\r\n      redirectUrl: redirectUrl\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n  sessionExists: sessionExists,\r\n  getSession: getSession,\r\n  closeSession: closeSession,\r\n  refreshSession: refreshSession,\r\n  setCookieAndRedirect: setCookieAndRedirect\r\n};\r\n",null]}