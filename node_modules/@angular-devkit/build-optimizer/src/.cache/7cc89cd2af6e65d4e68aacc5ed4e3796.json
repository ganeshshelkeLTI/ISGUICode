{"remainingRequest":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\deployment-notification-cr\\node_modules\\reqwest\\reqwest.js","dependencies":[{"path":"F:\\deployment-notification-cr\\node_modules\\reqwest\\reqwest.js","mtime":1584689818459},{"path":"F:\\deployment-notification-cr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584689768230},{"path":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584689753517}],"contextDependencies":[],"result":["/*!\r\n  * Reqwest! A general purpose XHR connection manager\r\n  * license MIT (c) Dustin Diaz 2015\r\n  * https://github.com/ded/reqwest\r\n  */\r\n\r\n!function (name, context, definition) {\r\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\r\n  else if (typeof define == 'function' && define.amd) define(definition)\r\n  else context[name] = definition()\r\n}('reqwest', this, function () {\r\n\r\n  var context = this\r\n\r\n  if ('window' in context) {\r\n    var doc = document\r\n      , byTag = 'getElementsByTagName'\r\n      , head = doc[byTag]('head')[0]\r\n  } else {\r\n    var XHR2\r\n    try {\r\n      XHR2 = require('xhr2')\r\n    } catch (ex) {\r\n      throw new Error('Peer dependency `xhr2` required! Please npm install xhr2')\r\n    }\r\n  }\r\n\r\n\r\n  var httpsRe = /^http/\r\n    , protocolRe = /(^\\w+):\\/\\//\r\n    , twoHundo = /^(20\\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\r\n    , readyState = 'readyState'\r\n    , contentType = 'Content-Type'\r\n    , requestedWith = 'X-Requested-With'\r\n    , uniqid = 0\r\n    , callbackPrefix = 'reqwest_' + (+new Date())\r\n    , lastValue // data stored by the most recent JSONP callback\r\n    , xmlHttpRequest = 'XMLHttpRequest'\r\n    , xDomainRequest = 'XDomainRequest'\r\n    , noop = function () {}\r\n\r\n    , isArray = typeof Array.isArray == 'function'\r\n        ? Array.isArray\r\n        : function (a) {\r\n            return a instanceof Array\r\n          }\r\n\r\n    , defaultHeaders = {\r\n          'contentType': 'application/x-www-form-urlencoded'\r\n        , 'requestedWith': xmlHttpRequest\r\n        , 'accept': {\r\n              '*':  'text/javascript, text/html, application/xml, text/xml, */*'\r\n            , 'xml':  'application/xml, text/xml'\r\n            , 'html': 'text/html'\r\n            , 'text': 'text/plain'\r\n            , 'json': 'application/json, text/javascript'\r\n            , 'js':   'application/javascript, text/javascript'\r\n          }\r\n      }\r\n\r\n    , xhr = function(o) {\r\n        // is it x-domain\r\n        if (o['crossOrigin'] === true) {\r\n          var xhr = context[xmlHttpRequest] ? new XMLHttpRequest() : null\r\n          if (xhr && 'withCredentials' in xhr) {\r\n            return xhr\r\n          } else if (context[xDomainRequest]) {\r\n            return new XDomainRequest()\r\n          } else {\r\n            throw new Error('Browser does not support cross-origin requests')\r\n          }\r\n        } else if (context[xmlHttpRequest]) {\r\n          return new XMLHttpRequest()\r\n        } else if (XHR2) {\r\n          return new XHR2()\r\n        } else {\r\n          return new ActiveXObject('Microsoft.XMLHTTP')\r\n        }\r\n      }\r\n    , globalSetupOptions = {\r\n        dataFilter: function (data) {\r\n          return data\r\n        }\r\n      }\r\n\r\n  function succeed(r) {\r\n    var protocol = protocolRe.exec(r.url)\r\n    protocol = (protocol && protocol[1]) || context.location.protocol\r\n    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response\r\n  }\r\n\r\n  function handleReadyState(r, success, error) {\r\n    return function () {\r\n      // use _aborted to mitigate against IE err c00c023f\r\n      // (can't read props on aborted request objects)\r\n      if (r._aborted) return error(r.request)\r\n      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')\r\n      if (r.request && r.request[readyState] == 4) {\r\n        r.request.onreadystatechange = noop\r\n        if (succeed(r)) success(r.request)\r\n        else\r\n          error(r.request)\r\n      }\r\n    }\r\n  }\r\n\r\n  function setHeaders(http, o) {\r\n    var headers = o['headers'] || {}\r\n      , h\r\n\r\n    headers['Accept'] = headers['Accept']\r\n      || defaultHeaders['accept'][o['type']]\r\n      || defaultHeaders['accept']['*']\r\n\r\n    var isAFormData = typeof FormData !== 'undefined' && (o['data'] instanceof FormData);\r\n    // breaks cross-origin requests with legacy browsers\r\n    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']\r\n    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']\r\n    for (h in headers)\r\n      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])\r\n  }\r\n\r\n  function setCredentials(http, o) {\r\n    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {\r\n      http.withCredentials = !!o['withCredentials']\r\n    }\r\n  }\r\n\r\n  function generalCallback(data) {\r\n    lastValue = data\r\n  }\r\n\r\n  function urlappend (url, s) {\r\n    return url + (/\\?/.test(url) ? '&' : '?') + s\r\n  }\r\n\r\n  function handleJsonp(o, fn, err, url) {\r\n    var reqId = uniqid++\r\n      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key\r\n      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)\r\n      , cbreg = new RegExp('((^|\\\\?|&)' + cbkey + ')=([^&]+)')\r\n      , match = url.match(cbreg)\r\n      , script = doc.createElement('script')\r\n      , loaded = 0\r\n      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1\r\n\r\n    if (match) {\r\n      if (match[3] === '?') {\r\n        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name\r\n      } else {\r\n        cbval = match[3] // provided callback func name\r\n      }\r\n    } else {\r\n      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em\r\n    }\r\n\r\n    context[cbval] = generalCallback\r\n\r\n    script.type = 'text/javascript'\r\n    script.src = url\r\n    script.async = true\r\n    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {\r\n      // need this for IE due to out-of-order onreadystatechange(), binding script\r\n      // execution to an event listener gives us control over when the script\r\n      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\r\n      script.htmlFor = script.id = '_reqwest_' + reqId\r\n    }\r\n\r\n    script.onload = script.onreadystatechange = function () {\r\n      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {\r\n        return false\r\n      }\r\n      script.onload = script.onreadystatechange = null\r\n      script.onclick && script.onclick()\r\n      // Call the user callback with the last value stored and clean up values and scripts.\r\n      fn(lastValue)\r\n      lastValue = undefined\r\n      head.removeChild(script)\r\n      loaded = 1\r\n    }\r\n\r\n    // Add the script to the DOM head\r\n    head.appendChild(script)\r\n\r\n    // Enable JSONP timeout\r\n    return {\r\n      abort: function () {\r\n        script.onload = script.onreadystatechange = null\r\n        err({}, 'Request is aborted: timeout', {})\r\n        lastValue = undefined\r\n        head.removeChild(script)\r\n        loaded = 1\r\n      }\r\n    }\r\n  }\r\n\r\n  function getRequest(fn, err) {\r\n    var o = this.o\r\n      , method = (o['method'] || 'GET').toUpperCase()\r\n      , url = typeof o === 'string' ? o : o['url']\r\n      // convert non-string objects to query-string form unless o['processData'] is false\r\n      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')\r\n        ? reqwest.toQueryString(o['data'])\r\n        : (o['data'] || null)\r\n      , http\r\n      , sendWait = false\r\n\r\n    // if we're working on a GET request and we have data then we should append\r\n    // query string to end of URL and not post data\r\n    if ((o['type'] == 'jsonp' || method == 'GET') && data) {\r\n      url = urlappend(url, data)\r\n      data = null\r\n    }\r\n\r\n    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)\r\n\r\n    // get the xhr from the factory if passed\r\n    // if the factory returns null, fall-back to ours\r\n    http = (o.xhr && o.xhr(o)) || xhr(o)\r\n\r\n    http.open(method, url, o['async'] === false ? false : true)\r\n    setHeaders(http, o)\r\n    setCredentials(http, o)\r\n    if (context[xDomainRequest] && http instanceof context[xDomainRequest]) {\r\n        http.onload = fn\r\n        http.onerror = err\r\n        // NOTE: see\r\n        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e\r\n        http.onprogress = function() {}\r\n        sendWait = true\r\n    } else {\r\n      http.onreadystatechange = handleReadyState(this, fn, err)\r\n    }\r\n    o['before'] && o['before'](http)\r\n    if (sendWait) {\r\n      setTimeout(function () {\r\n        http.send(data)\r\n      }, 200)\r\n    } else {\r\n      http.send(data)\r\n    }\r\n    return http\r\n  }\r\n\r\n  function Reqwest(o, fn) {\r\n    this.o = o\r\n    this.fn = fn\r\n\r\n    init.apply(this, arguments)\r\n  }\r\n\r\n  function setType(header) {\r\n    // json, javascript, text/plain, text/html, xml\r\n    if (header === null) return undefined; //In case of no content-type.\r\n    if (header.match('json')) return 'json'\r\n    if (header.match('javascript')) return 'js'\r\n    if (header.match('text')) return 'html'\r\n    if (header.match('xml')) return 'xml'\r\n  }\r\n\r\n  function init(o, fn) {\r\n\r\n    this.url = typeof o == 'string' ? o : o['url']\r\n    this.timeout = null\r\n\r\n    // whether request has been fulfilled for purpose\r\n    // of tracking the Promises\r\n    this._fulfilled = false\r\n    // success handlers\r\n    this._successHandler = function(){}\r\n    this._fulfillmentHandlers = []\r\n    // error handlers\r\n    this._errorHandlers = []\r\n    // complete (both success and fail) handlers\r\n    this._completeHandlers = []\r\n    this._erred = false\r\n    this._responseArgs = {}\r\n\r\n    var self = this\r\n\r\n    fn = fn || function () {}\r\n\r\n    if (o['timeout']) {\r\n      this.timeout = setTimeout(function () {\r\n        timedOut()\r\n      }, o['timeout'])\r\n    }\r\n\r\n    if (o['success']) {\r\n      this._successHandler = function () {\r\n        o['success'].apply(o, arguments)\r\n      }\r\n    }\r\n\r\n    if (o['error']) {\r\n      this._errorHandlers.push(function () {\r\n        o['error'].apply(o, arguments)\r\n      })\r\n    }\r\n\r\n    if (o['complete']) {\r\n      this._completeHandlers.push(function () {\r\n        o['complete'].apply(o, arguments)\r\n      })\r\n    }\r\n\r\n    function complete (resp) {\r\n      o['timeout'] && clearTimeout(self.timeout)\r\n      self.timeout = null\r\n      while (self._completeHandlers.length > 0) {\r\n        self._completeHandlers.shift()(resp)\r\n      }\r\n    }\r\n\r\n    function success (resp) {\r\n      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE\r\n      resp = (type !== 'jsonp') ? self.request : resp\r\n      // use global data filter on response text\r\n      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)\r\n        , r = filteredResponse\r\n      try {\r\n        resp.responseText = r\r\n      } catch (e) {\r\n        // can't assign this in IE<=8, just ignore\r\n      }\r\n      if (r) {\r\n        switch (type) {\r\n        case 'json':\r\n          try {\r\n            resp = context.JSON ? context.JSON.parse(r) : eval('(' + r + ')')\r\n          } catch (err) {\r\n            return error(resp, 'Could not parse JSON in response', err)\r\n          }\r\n          break\r\n        case 'js':\r\n          resp = eval(r)\r\n          break\r\n        case 'html':\r\n          resp = r\r\n          break\r\n        case 'xml':\r\n          resp = resp.responseXML\r\n              && resp.responseXML.parseError // IE trololo\r\n              && resp.responseXML.parseError.errorCode\r\n              && resp.responseXML.parseError.reason\r\n            ? null\r\n            : resp.responseXML\r\n          break\r\n        }\r\n      }\r\n\r\n      self._responseArgs.resp = resp\r\n      self._fulfilled = true\r\n      fn(resp)\r\n      self._successHandler(resp)\r\n      while (self._fulfillmentHandlers.length > 0) {\r\n        resp = self._fulfillmentHandlers.shift()(resp)\r\n      }\r\n\r\n      complete(resp)\r\n    }\r\n\r\n    function timedOut() {\r\n      self._timedOut = true\r\n      self.request.abort()\r\n    }\r\n\r\n    function error(resp, msg, t) {\r\n      resp = self.request\r\n      self._responseArgs.resp = resp\r\n      self._responseArgs.msg = msg\r\n      self._responseArgs.t = t\r\n      self._erred = true\r\n      while (self._errorHandlers.length > 0) {\r\n        self._errorHandlers.shift()(resp, msg, t)\r\n      }\r\n      complete(resp)\r\n    }\r\n\r\n    this.request = getRequest.call(this, success, error)\r\n  }\r\n\r\n  Reqwest.prototype = {\r\n    abort: function () {\r\n      this._aborted = true\r\n      this.request.abort()\r\n    }\r\n\r\n  , retry: function () {\r\n      init.call(this, this.o, this.fn)\r\n    }\r\n\r\n    /**\r\n     * Small deviation from the Promises A CommonJs specification\r\n     * http://wiki.commonjs.org/wiki/Promises/A\r\n     */\r\n\r\n    /**\r\n     * `then` will execute upon successful requests\r\n     */\r\n  , then: function (success, fail) {\r\n      success = success || function () {}\r\n      fail = fail || function () {}\r\n      if (this._fulfilled) {\r\n        this._responseArgs.resp = success(this._responseArgs.resp)\r\n      } else if (this._erred) {\r\n        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\r\n      } else {\r\n        this._fulfillmentHandlers.push(success)\r\n        this._errorHandlers.push(fail)\r\n      }\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * `always` will execute whether the request succeeds or fails\r\n     */\r\n  , always: function (fn) {\r\n      if (this._fulfilled || this._erred) {\r\n        fn(this._responseArgs.resp)\r\n      } else {\r\n        this._completeHandlers.push(fn)\r\n      }\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * `fail` will execute when the request fails\r\n     */\r\n  , fail: function (fn) {\r\n      if (this._erred) {\r\n        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\r\n      } else {\r\n        this._errorHandlers.push(fn)\r\n      }\r\n      return this\r\n    }\r\n  , 'catch': function (fn) {\r\n      return this.fail(fn)\r\n    }\r\n  }\r\n\r\n  function reqwest(o, fn) {\r\n    return new Reqwest(o, fn)\r\n  }\r\n\r\n  // normalize newline variants according to spec -> CRLF\r\n  function normalize(s) {\r\n    return s ? s.replace(/\\r?\\n/g, '\\r\\n') : ''\r\n  }\r\n\r\n  function serial(el, cb) {\r\n    var n = el.name\r\n      , t = el.tagName.toLowerCase()\r\n      , optCb = function (o) {\r\n          // IE gives value=\"\" even where there is no value attribute\r\n          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273\r\n          if (o && !o['disabled'])\r\n            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))\r\n        }\r\n      , ch, ra, val, i\r\n\r\n    // don't serialize elements that are disabled or without a name\r\n    if (el.disabled || !n) return\r\n\r\n    switch (t) {\r\n    case 'input':\r\n      if (!/reset|button|image|file/i.test(el.type)) {\r\n        ch = /checkbox/i.test(el.type)\r\n        ra = /radio/i.test(el.type)\r\n        val = el.value\r\n        // WebKit gives us \"\" instead of \"on\" if a checkbox has no value, so correct it here\r\n        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))\r\n      }\r\n      break\r\n    case 'textarea':\r\n      cb(n, normalize(el.value))\r\n      break\r\n    case 'select':\r\n      if (el.type.toLowerCase() === 'select-one') {\r\n        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)\r\n      } else {\r\n        for (i = 0; el.length && i < el.length; i++) {\r\n          el.options[i].selected && optCb(el.options[i])\r\n        }\r\n      }\r\n      break\r\n    }\r\n  }\r\n\r\n  // collect up all form elements found from the passed argument elements all\r\n  // the way down to child elements; pass a '<form>' or form fields.\r\n  // called with 'this'=callback to use for serial() on each element\r\n  function eachFormElement() {\r\n    var cb = this\r\n      , e, i\r\n      , serializeSubtags = function (e, tags) {\r\n          var i, j, fa\r\n          for (i = 0; i < tags.length; i++) {\r\n            fa = e[byTag](tags[i])\r\n            for (j = 0; j < fa.length; j++) serial(fa[j], cb)\r\n          }\r\n        }\r\n\r\n    for (i = 0; i < arguments.length; i++) {\r\n      e = arguments[i]\r\n      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)\r\n      serializeSubtags(e, [ 'input', 'select', 'textarea' ])\r\n    }\r\n  }\r\n\r\n  // standard query string style serialization\r\n  function serializeQueryString() {\r\n    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))\r\n  }\r\n\r\n  // { 'name': 'value', ... } style serialization\r\n  function serializeHash() {\r\n    var hash = {}\r\n    eachFormElement.apply(function (name, value) {\r\n      if (name in hash) {\r\n        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])\r\n        hash[name].push(value)\r\n      } else hash[name] = value\r\n    }, arguments)\r\n    return hash\r\n  }\r\n\r\n  // [ { name: 'name', value: 'value' }, ... ] style serialization\r\n  reqwest.serializeArray = function () {\r\n    var arr = []\r\n    eachFormElement.apply(function (name, value) {\r\n      arr.push({name: name, value: value})\r\n    }, arguments)\r\n    return arr\r\n  }\r\n\r\n  reqwest.serialize = function () {\r\n    if (arguments.length === 0) return ''\r\n    var opt, fn\r\n      , args = Array.prototype.slice.call(arguments, 0)\r\n\r\n    opt = args.pop()\r\n    opt && opt.nodeType && args.push(opt) && (opt = null)\r\n    opt && (opt = opt.type)\r\n\r\n    if (opt == 'map') fn = serializeHash\r\n    else if (opt == 'array') fn = reqwest.serializeArray\r\n    else fn = serializeQueryString\r\n\r\n    return fn.apply(null, args)\r\n  }\r\n\r\n  reqwest.toQueryString = function (o, trad) {\r\n    var prefix, i\r\n      , traditional = trad || false\r\n      , s = []\r\n      , enc = encodeURIComponent\r\n      , add = function (key, value) {\r\n          // If value is a function, invoke it and return its value\r\n          value = ('function' === typeof value) ? value() : (value == null ? '' : value)\r\n          s[s.length] = enc(key) + '=' + enc(value)\r\n        }\r\n    // If an array was passed in, assume that it is an array of form elements.\r\n    if (isArray(o)) {\r\n      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])\r\n    } else {\r\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\r\n      // did it), otherwise encode params recursively.\r\n      for (prefix in o) {\r\n        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)\r\n      }\r\n    }\r\n\r\n    // spaces should be + according to spec\r\n    return s.join('&').replace(/%20/g, '+')\r\n  }\r\n\r\n  function buildParams(prefix, obj, traditional, add) {\r\n    var name, i, v\r\n      , rbracket = /\\[\\]$/\r\n\r\n    if (isArray(obj)) {\r\n      // Serialize array item.\r\n      for (i = 0; obj && i < obj.length; i++) {\r\n        v = obj[i]\r\n        if (traditional || rbracket.test(prefix)) {\r\n          // Treat each array item as a scalar.\r\n          add(prefix, v)\r\n        } else {\r\n          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)\r\n        }\r\n      }\r\n    } else if (obj && obj.toString() === '[object Object]') {\r\n      // Serialize object item.\r\n      for (name in obj) {\r\n        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)\r\n      }\r\n\r\n    } else {\r\n      // Serialize scalar item.\r\n      add(prefix, obj)\r\n    }\r\n  }\r\n\r\n  reqwest.getcallbackPrefix = function () {\r\n    return callbackPrefix\r\n  }\r\n\r\n  // jQuery and Zepto compatibility, differences can be remapped here so you can call\r\n  // .ajax.compat(options, callback)\r\n  reqwest.compat = function (o, fn) {\r\n    if (o) {\r\n      o['type'] && (o['method'] = o['type']) && delete o['type']\r\n      o['dataType'] && (o['type'] = o['dataType'])\r\n      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']\r\n      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])\r\n    }\r\n    return new Reqwest(o, fn)\r\n  }\r\n\r\n  reqwest.ajaxSetup = function (options) {\r\n    options = options || {}\r\n    for (var k in options) {\r\n      globalSetupOptions[k] = options[k]\r\n    }\r\n  }\r\n\r\n  return reqwest\r\n});\r\n",null]}