{"remainingRequest":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\deployment-notification-cr\\node_modules\\@okta\\okta-auth-js\\lib\\builderUtil.js","dependencies":[{"path":"F:\\deployment-notification-cr\\node_modules\\@okta\\okta-auth-js\\lib\\builderUtil.js","mtime":1584689763330},{"path":"F:\\deployment-notification-cr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584689768230},{"path":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584689753517}],"contextDependencies":[],"result":["/*!\r\n * Copyright (c) 2018-present, Okta, Inc. and/or its affiliates. All rights reserved.\r\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\r\n *\r\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and limitations under the License.\r\n */\r\n\r\nvar AuthSdkError = require('./errors/AuthSdkError');\r\nvar tx = require('./tx');\r\nvar util = require('./util');\r\n\r\nfunction getValidUrl(args) {\r\n  if (!args) {\r\n    throw new AuthSdkError('No arguments passed to constructor. ' +\r\n      'Required usage: new OktaAuth(args)');\r\n  }\r\n\r\n  var url = args.url;\r\n  if (!url) {\r\n    var isUrlRegex = new RegExp('^http?s?://.+');\r\n    if (args.issuer && isUrlRegex.test(args.issuer)) {\r\n      // Infer the URL from the issuer URL, omitting the /oauth2/{authServerId}\r\n      url = args.issuer.split('/oauth2/')[0];\r\n    } else {\r\n      throw new AuthSdkError('No url passed to constructor. ' +\r\n      'Required usage: new OktaAuth({url: \"https://{yourOktaDomain}.com\"})');\r\n    }\r\n  }\r\n\r\n  if (url.indexOf('-admin.') !== -1) {\r\n    throw new AuthSdkError('URL passed to constructor contains \"-admin\" in subdomain. ' +\r\n      'Required usage: new OktaAuth({url: \"https://{yourOktaDomain}.com})');\r\n  }\r\n\r\n  return url;\r\n}\r\n\r\nfunction addSharedPrototypes(proto) {\r\n  // { username, (relayState) }\r\n  proto.forgotPassword = function (opts) {\r\n    return tx.postToTransaction(this, '/api/v1/authn/recovery/password', opts);\r\n  };\r\n\r\n  // { username, (relayState) }\r\n  proto.unlockAccount = function (opts) {\r\n    return tx.postToTransaction(this, '/api/v1/authn/recovery/unlock', opts);\r\n  };\r\n\r\n  // { recoveryToken }\r\n  proto.verifyRecoveryToken = function (opts) {\r\n    return tx.postToTransaction(this, '/api/v1/authn/recovery/token', opts);\r\n  };\r\n}\r\n\r\nfunction buildOktaAuth(OktaAuthBuilder) {\r\n  return function(storageUtil, httpRequestClient) {\r\n    function OktaAuth(args) {\r\n      if (!(this instanceof OktaAuth)) {\r\n        return new OktaAuth(args);\r\n      }\r\n\r\n      if (args) {\r\n        args.storageUtil = storageUtil;\r\n\r\n        if (args.ajaxRequest) {\r\n          util.deprecate('ajaxRequest is being deprecated, use httpRequestClient attribute instead.');\r\n          args.httpRequestClient = args.ajaxRequest;\r\n        } else if (!args.httpRequestClient) {\r\n          args.httpRequestClient = httpRequestClient;\r\n        }\r\n      }\r\n\r\n      util.bind(OktaAuthBuilder, this)(args);\r\n    }\r\n    OktaAuth.prototype = OktaAuthBuilder.prototype;\r\n    OktaAuth.prototype.constructor = OktaAuth;\r\n\r\n    return OktaAuth;\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  addSharedPrototypes: addSharedPrototypes,\r\n  buildOktaAuth: buildOktaAuth,\r\n  getValidUrl: getValidUrl\r\n};\r\n",null]}