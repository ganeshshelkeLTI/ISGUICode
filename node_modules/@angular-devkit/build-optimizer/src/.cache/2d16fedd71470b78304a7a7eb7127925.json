{"remainingRequest":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\InformXUI\\node_modules\\d3-axis\\src\\axis.js","dependencies":[{"path":"D:\\InformXUI\\node_modules\\d3-axis\\src\\axis.js","mtime":1561962771044},{"path":"D:\\InformXUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561962767981},{"path":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1561962756102}],"contextDependencies":[],"result":["import {slice} from \"./array\";\r\nimport identity from \"./identity\";\r\n\r\nvar top = 1,\r\n    right = 2,\r\n    bottom = 3,\r\n    left = 4,\r\n    epsilon = 1e-6;\r\n\r\nfunction translateX(x) {\r\n  return \"translate(\" + (x + 0.5) + \",0)\";\r\n}\r\n\r\nfunction translateY(y) {\r\n  return \"translate(0,\" + (y + 0.5) + \")\";\r\n}\r\n\r\nfunction number(scale) {\r\n  return function(d) {\r\n    return +scale(d);\r\n  };\r\n}\r\n\r\nfunction center(scale) {\r\n  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.\r\n  if (scale.round()) offset = Math.round(offset);\r\n  return function(d) {\r\n    return +scale(d) + offset;\r\n  };\r\n}\r\n\r\nfunction entering() {\r\n  return !this.__axis;\r\n}\r\n\r\nfunction axis(orient, scale) {\r\n  var tickArguments = [],\r\n      tickValues = null,\r\n      tickFormat = null,\r\n      tickSizeInner = 6,\r\n      tickSizeOuter = 6,\r\n      tickPadding = 3,\r\n      k = orient === top || orient === left ? -1 : 1,\r\n      x = orient === left || orient === right ? \"x\" : \"y\",\r\n      transform = orient === top || orient === bottom ? translateX : translateY;\r\n\r\n  function axis(context) {\r\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\r\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,\r\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\r\n        range = scale.range(),\r\n        range0 = +range[0] + 0.5,\r\n        range1 = +range[range.length - 1] + 0.5,\r\n        position = (scale.bandwidth ? center : number)(scale.copy()),\r\n        selection = context.selection ? context.selection() : context,\r\n        path = selection.selectAll(\".domain\").data([null]),\r\n        tick = selection.selectAll(\".tick\").data(values, scale).order(),\r\n        tickExit = tick.exit(),\r\n        tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\r\n        line = tick.select(\"line\"),\r\n        text = tick.select(\"text\");\r\n\r\n    path = path.merge(path.enter().insert(\"path\", \".tick\")\r\n        .attr(\"class\", \"domain\")\r\n        .attr(\"stroke\", \"#000\"));\r\n\r\n    tick = tick.merge(tickEnter);\r\n\r\n    line = line.merge(tickEnter.append(\"line\")\r\n        .attr(\"stroke\", \"#000\")\r\n        .attr(x + \"2\", k * tickSizeInner));\r\n\r\n    text = text.merge(tickEnter.append(\"text\")\r\n        .attr(\"fill\", \"#000\")\r\n        .attr(x, k * spacing)\r\n        .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\r\n\r\n    if (context !== selection) {\r\n      path = path.transition(context);\r\n      tick = tick.transition(context);\r\n      line = line.transition(context);\r\n      text = text.transition(context);\r\n\r\n      tickExit = tickExit.transition(context)\r\n          .attr(\"opacity\", epsilon)\r\n          .attr(\"transform\", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute(\"transform\"); });\r\n\r\n      tickEnter\r\n          .attr(\"opacity\", epsilon)\r\n          .attr(\"transform\", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });\r\n    }\r\n\r\n    tickExit.remove();\r\n\r\n    path\r\n        .attr(\"d\", orient === left || orient == right\r\n            ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter\r\n            : \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter);\r\n\r\n    tick\r\n        .attr(\"opacity\", 1)\r\n        .attr(\"transform\", function(d) { return transform(position(d)); });\r\n\r\n    line\r\n        .attr(x + \"2\", k * tickSizeInner);\r\n\r\n    text\r\n        .attr(x, k * spacing)\r\n        .text(format);\r\n\r\n    selection.filter(entering)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"font-size\", 10)\r\n        .attr(\"font-family\", \"sans-serif\")\r\n        .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\r\n\r\n    selection\r\n        .each(function() { this.__axis = position; });\r\n  }\r\n\r\n  axis.scale = function(_) {\r\n    return arguments.length ? (scale = _, axis) : scale;\r\n  };\r\n\r\n  axis.ticks = function() {\r\n    return tickArguments = slice.call(arguments), axis;\r\n  };\r\n\r\n  axis.tickArguments = function(_) {\r\n    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();\r\n  };\r\n\r\n  axis.tickValues = function(_) {\r\n    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();\r\n  };\r\n\r\n  axis.tickFormat = function(_) {\r\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\r\n  };\r\n\r\n  axis.tickSize = function(_) {\r\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\r\n  };\r\n\r\n  axis.tickSizeInner = function(_) {\r\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\r\n  };\r\n\r\n  axis.tickSizeOuter = function(_) {\r\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\r\n  };\r\n\r\n  axis.tickPadding = function(_) {\r\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\r\n  };\r\n\r\n  return axis;\r\n}\r\n\r\nexport function axisTop(scale) {\r\n  return axis(top, scale);\r\n}\r\n\r\nexport function axisRight(scale) {\r\n  return axis(right, scale);\r\n}\r\n\r\nexport function axisBottom(scale) {\r\n  return axis(bottom, scale);\r\n}\r\n\r\nexport function axisLeft(scale) {\r\n  return axis(left, scale);\r\n}\r\n",null]}