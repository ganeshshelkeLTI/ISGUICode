{"remainingRequest":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\ISG-InformX\\node_modules\\@okta\\configuration-validation\\dist\\lib.js","dependencies":[{"path":"D:\\ISG-InformX\\node_modules\\@okta\\configuration-validation\\dist\\lib.js","mtime":1562860445394},{"path":"D:\\ISG-InformX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1562860456543},{"path":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1562860430677}],"contextDependencies":[],"result":["'use strict';\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\r\n\r\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\r\n\r\n/*!\r\n * Copyright (c) 2018-Present, Okta, Inc. and/or its affiliates. All rights reserved.\r\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\r\n *\r\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and limitations under the License.\r\n */\r\n\r\nvar ConfigurationValidationError = function (_Error) {\r\n  _inherits(ConfigurationValidationError, _Error);\r\n\r\n  function ConfigurationValidationError() {\r\n    _classCallCheck(this, ConfigurationValidationError);\r\n\r\n    return _possibleConstructorReturn(this, (ConfigurationValidationError.__proto__ || Object.getPrototypeOf(ConfigurationValidationError)).apply(this, arguments));\r\n  }\r\n\r\n  return ConfigurationValidationError;\r\n}(Error);\r\n\r\nvar configUtil = module.exports;\r\n\r\nvar findDomainURL = 'https://bit.ly/finding-okta-domain';\r\nvar findAppCredentialsURL = 'https://bit.ly/finding-okta-app-credentials';\r\n\r\nvar copyCredentialsMessage = 'You can copy it from the Okta Developer Console ' + 'in the details for the Application you created. ' + ('Follow these instructions to find it: ' + findAppCredentialsURL);\r\n\r\nconfigUtil.assertIssuer = function (issuer) {\r\n  var testing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n  var copyMessage = 'You can copy your domain from the Okta Developer ' + 'Console. Follow these instructions to find it: ' + findDomainURL;\r\n\r\n  if (testing.disableHttpsCheck) {\r\n    var httpsWarning = 'Warning: HTTPS check is disabled. ' + 'This allows for insecure configurations and is NOT recommended for production use.';\r\n    /* eslint-disable-next-line no-console */\r\n    console.warn(httpsWarning);\r\n  }\r\n\r\n  if (!issuer) {\r\n    throw new ConfigurationValidationError('Your Okta URL is missing. ' + copyMessage);\r\n  } else if (!testing.disableHttpsCheck && !issuer.match(/^https:\\/\\//g)) {\r\n    throw new ConfigurationValidationError('Your Okta URL must start with https. ' + ('Current value: ' + issuer + '. ' + copyMessage));\r\n  } else if (issuer.match(/{yourOktaDomain}/g)) {\r\n    throw new ConfigurationValidationError('Replace {yourOktaDomain} with your Okta domain. ' + copyMessage);\r\n  } else if (issuer.match(/-admin.(okta|oktapreview|okta-emea).com/g)) {\r\n    throw new ConfigurationValidationError('Your Okta domain should not contain -admin. ' + ('Current value: ' + issuer + '. ' + copyMessage));\r\n  } else if (issuer.match(/(.com.com)|(:\\/\\/.*){2,}/g)) {\r\n    throw new ConfigurationValidationError('It looks like there\\'s a typo in your Okta domain. ' + ('Current value: ' + issuer + '. ' + copyMessage));\r\n  }\r\n};\r\n\r\nconfigUtil.assertClientId = function (clientId) {\r\n  if (!clientId) {\r\n    throw new ConfigurationValidationError('Your client ID is missing. ' + copyCredentialsMessage);\r\n  } else if (clientId.match(/{clientId}/g)) {\r\n    throw new ConfigurationValidationError('Replace {clientId} with the client ID of your Application. ' + copyCredentialsMessage);\r\n  }\r\n};\r\n\r\nconfigUtil.assertClientSecret = function (clientSecret) {\r\n  if (!clientSecret) {\r\n    throw new ConfigurationValidationError('Your client secret is missing. ' + copyCredentialsMessage);\r\n  } else if (clientSecret.match(/{clientSecret}/g)) {\r\n    throw new ConfigurationValidationError('Replace {clientSecret} with the client secret of your Application. ' + copyCredentialsMessage);\r\n  }\r\n};\r\n\r\nconfigUtil.assertRedirectUri = function (redirectUri) {\r\n  if (!redirectUri) {\r\n    throw new ConfigurationValidationError('Your redirect URI is missing.');\r\n  } else if (redirectUri.match(/{redirectUri}/g)) {\r\n    throw new ConfigurationValidationError('Replace {redirectUri} with the redirect URI of your Application.');\r\n  }\r\n};",null]}