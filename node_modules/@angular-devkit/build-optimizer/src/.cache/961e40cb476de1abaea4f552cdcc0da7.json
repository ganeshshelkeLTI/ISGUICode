{"remainingRequest":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!F:\\deployment-notification-cr\\node_modules\\@okta\\okta-auth-js\\lib\\browser\\browserStorage.js","dependencies":[{"path":"F:\\deployment-notification-cr\\node_modules\\@okta\\okta-auth-js\\lib\\browser\\browserStorage.js","mtime":1584689763328},{"path":"F:\\deployment-notification-cr\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1584689768230},{"path":"F:\\deployment-notification-cr\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1584689753517}],"contextDependencies":[],"result":["/*!\r\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\r\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\r\n *\r\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and limitations under the License.\r\n *\r\n */\r\n\r\nvar Cookies = require('js-cookie');\r\nvar storageBuilder = require('../storageBuilder');\r\nvar config = require('../config');\r\n\r\n// Building this as an object allows us to mock the functions in our tests\r\nvar storageUtil = {};\r\n\r\n// IE11 bug that Microsoft doesn't plan to fix\r\n// https://connect.microsoft.com/IE/Feedback/Details/1496040\r\nstorageUtil.browserHasLocalStorage = function() {\r\n  try {\r\n    var storage = storageUtil.getLocalStorage();\r\n    return storageUtil.testStorage(storage);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nstorageUtil.browserHasSessionStorage = function() {\r\n  try {\r\n    var storage = storageUtil.getSessionStorage();\r\n    return storageUtil.testStorage(storage);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nstorageUtil.getHttpCache = function() {\r\n  if (storageUtil.browserHasLocalStorage()) {\r\n    return storageBuilder(storageUtil.getLocalStorage(), config.CACHE_STORAGE_NAME);\r\n  } else if (storageUtil.browserHasSessionStorage()) {\r\n    return storageBuilder(storageUtil.getSessionStorage(), config.CACHE_STORAGE_NAME);\r\n  } else {\r\n    return storageBuilder(storageUtil.getCookieStorage(), config.CACHE_STORAGE_NAME);\r\n  }\r\n};\r\n\r\nstorageUtil.getLocalStorage = function() {\r\n  return localStorage;\r\n};\r\n\r\nstorageUtil.getSessionStorage = function() {\r\n  return sessionStorage;\r\n};\r\n\r\n// Provides webStorage-like interface for cookies\r\nstorageUtil.getCookieStorage = function() {\r\n  return {\r\n    getItem: storageUtil.storage.get,\r\n    setItem: function(key, value) {\r\n      // Cookie shouldn't expire\r\n      storageUtil.storage.set(key, value, '2200-01-01T00:00:00.000Z');\r\n    }\r\n  };\r\n};\r\n\r\nstorageUtil.testStorage = function(storage) {\r\n  var key = 'okta-test-storage';\r\n  try {\r\n    storage.setItem(key, key);\r\n    storage.removeItem(key);\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n\r\nstorageUtil.storage = {\r\n  set: function(name, value, expiresAt) {\r\n    var cookieOptions = {\r\n      path: '/'\r\n    };\r\n\r\n    // eslint-disable-next-line no-extra-boolean-cast\r\n    if (!!(Date.parse(expiresAt))) {\r\n      // Expires value can be converted to a Date object.\r\n      //\r\n      // If the 'expiresAt' value is not provided, or the value cannot be\r\n      // parsed as a Date object, the cookie will set as a session cookie.\r\n      cookieOptions.expires = new Date(expiresAt);\r\n    }\r\n\r\n    Cookies.set(name, value, cookieOptions);\r\n    return storageUtil.storage.get(name);\r\n  },\r\n\r\n  get: function(name) {\r\n    return Cookies.get(name);\r\n  },\r\n\r\n  delete: function(name) {\r\n    return Cookies.remove(name, { path: '/' });\r\n  }\r\n};\r\n\r\nmodule.exports = storageUtil;\r\n",null]}