{"remainingRequest":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\ISG-InformX\\node_modules\\d3-contour\\src\\density.js","dependencies":[{"path":"D:\\ISG-InformX\\node_modules\\d3-contour\\src\\density.js","mtime":1562860464370},{"path":"D:\\ISG-InformX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1562860456543},{"path":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1562860430677}],"contextDependencies":[],"result":["import {max, range, tickStep} from \"d3-array\";\r\nimport {slice} from \"./array\";\r\nimport {blurX, blurY} from \"./blur\";\r\nimport constant from \"./constant\";\r\nimport contours from \"./contours\";\r\n\r\nfunction defaultX(d) {\r\n  return d[0];\r\n}\r\n\r\nfunction defaultY(d) {\r\n  return d[1];\r\n}\r\n\r\nfunction defaultWeight() {\r\n  return 1;\r\n}\r\n\r\nexport default function() {\r\n  var x = defaultX,\r\n      y = defaultY,\r\n      weight = defaultWeight,\r\n      dx = 960,\r\n      dy = 500,\r\n      r = 20, // blur radius\r\n      k = 2, // log2(grid cell size)\r\n      o = r * 3, // grid offset, to pad for blur\r\n      n = (dx + o * 2) >> k, // grid width\r\n      m = (dy + o * 2) >> k, // grid height\r\n      threshold = constant(20);\r\n\r\n  function density(data) {\r\n    var values0 = new Float32Array(n * m),\r\n        values1 = new Float32Array(n * m);\r\n\r\n    data.forEach(function(d, i, data) {\r\n      var xi = (+x(d, i, data) + o) >> k,\r\n          yi = (+y(d, i, data) + o) >> k,\r\n          wi = +weight(d, i, data);\r\n      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {\r\n        values0[xi + yi * n] += wi;\r\n      }\r\n    });\r\n\r\n    // TODO Optimize.\r\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);\r\n    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);\r\n\r\n    var tz = threshold(values0);\r\n\r\n    // Convert number of thresholds into uniform thresholds.\r\n    if (!Array.isArray(tz)) {\r\n      var stop = max(values0);\r\n      tz = tickStep(0, stop, tz);\r\n      tz = range(0, Math.floor(stop / tz) * tz, tz);\r\n      tz.shift();\r\n    }\r\n\r\n    return contours()\r\n        .thresholds(tz)\r\n        .size([n, m])\r\n      (values0)\r\n        .map(transform);\r\n  }\r\n\r\n  function transform(geometry) {\r\n    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.\r\n    geometry.coordinates.forEach(transformPolygon);\r\n    return geometry;\r\n  }\r\n\r\n  function transformPolygon(coordinates) {\r\n    coordinates.forEach(transformRing);\r\n  }\r\n\r\n  function transformRing(coordinates) {\r\n    coordinates.forEach(transformPoint);\r\n  }\r\n\r\n  // TODO Optimize.\r\n  function transformPoint(coordinates) {\r\n    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;\r\n    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;\r\n  }\r\n\r\n  function resize() {\r\n    o = r * 3;\r\n    n = (dx + o * 2) >> k;\r\n    m = (dy + o * 2) >> k;\r\n    return density;\r\n  }\r\n\r\n  density.x = function(_) {\r\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), density) : x;\r\n  };\r\n\r\n  density.y = function(_) {\r\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), density) : y;\r\n  };\r\n\r\n  density.weight = function(_) {\r\n    return arguments.length ? (weight = typeof _ === \"function\" ? _ : constant(+_), density) : weight;\r\n  };\r\n\r\n  density.size = function(_) {\r\n    if (!arguments.length) return [dx, dy];\r\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\r\n    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error(\"invalid size\");\r\n    return dx = _0, dy = _1, resize();\r\n  };\r\n\r\n  density.cellSize = function(_) {\r\n    if (!arguments.length) return 1 << k;\r\n    if (!((_ = +_) >= 1)) throw new Error(\"invalid cell size\");\r\n    return k = Math.floor(Math.log(_) / Math.LN2), resize();\r\n  };\r\n\r\n  density.thresholds = function(_) {\r\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;\r\n  };\r\n\r\n  density.bandwidth = function(_) {\r\n    if (!arguments.length) return Math.sqrt(r * (r + 1));\r\n    if (!((_ = +_) >= 0)) throw new Error(\"invalid bandwidth\");\r\n    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();\r\n  };\r\n\r\n  return density;\r\n}\r\n",null]}