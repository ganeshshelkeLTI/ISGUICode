{"remainingRequest":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\InformXUI\\node_modules\\angular-fusioncharts\\src\\fusioncharts.component.js","dependencies":[{"path":"D:\\InformXUI\\node_modules\\angular-fusioncharts\\src\\fusioncharts.component.js","mtime":1561962766049},{"path":"D:\\InformXUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561962767981},{"path":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1561962756102}],"contextDependencies":[],"result":["import { Component, Input, ElementRef, KeyValueDiffers, NgZone, Output, EventEmitter } from '@angular/core';\nimport { FusionChartsService } from './fusioncharts.service';\nimport { FusionChartsConstructor } from './fusioncharts.constructor';\nimport EventsList from '../events/events';\nvar FusionChartsComponent = /** @class */ /*@__PURE__*/ (function () {\n    function FusionChartsComponent(element, fusionchartsService, differs, zone) {\n        this.differs = differs;\n        this.zone = zone;\n        /**\n         * All Events List\n         */\n        this.eventList = EventsList;\n        /**\n         * All events emitter\n         */\n        this.beforeLinkedItemOpen = new EventEmitter();\n        this.linkedItemOpened = new EventEmitter();\n        this.beforeLinkedItemClose = new EventEmitter();\n        this.linkedItemClosed = new EventEmitter();\n        this.printReadyStateChange = new EventEmitter();\n        this.dataLoadRequestCompleted = new EventEmitter();\n        this.dataLoadError = new EventEmitter();\n        this.dataLoadCancelled = new EventEmitter();\n        this.dataLoadRequestCancelled = new EventEmitter();\n        this.dataUpdated = new EventEmitter();\n        this.dataUpdateCancelled = new EventEmitter();\n        this.dataLoadRequested = new EventEmitter();\n        this.beforeDataUpdate = new EventEmitter();\n        this.realTimeUpdateComplete = new EventEmitter();\n        this.chartCleared = new EventEmitter();\n        this.slicingEnd = new EventEmitter();\n        this.slicingStart = new EventEmitter();\n        this.entityRollOut = new EventEmitter();\n        this.entityRollOver = new EventEmitter();\n        this.entityClick = new EventEmitter();\n        this.connectorRollOver = new EventEmitter();\n        this.connectorRollOut = new EventEmitter();\n        this.connectorClick = new EventEmitter();\n        this.markerRollOver = new EventEmitter();\n        this.markerRollOut = new EventEmitter();\n        this.markerClick = new EventEmitter();\n        this.pageNavigated = new EventEmitter();\n        this.rotationEnd = new EventEmitter();\n        this.rotationStart = new EventEmitter();\n        this.centerLabelRollover = new EventEmitter();\n        this.centerLabelRollout = new EventEmitter();\n        this.centerLabelClick = new EventEmitter();\n        this.centerLabelChanged = new EventEmitter();\n        this.chartClick = new EventEmitter();\n        this.chartMouseMove = new EventEmitter();\n        this.chartRollOver = new EventEmitter();\n        this.chartRollOut = new EventEmitter();\n        this.backgroundLoaded = new EventEmitter();\n        this.backgroundLoadError = new EventEmitter();\n        this.legendItemClicked = new EventEmitter();\n        this.legendItemRollover = new EventEmitter();\n        this.legendItemRollout = new EventEmitter();\n        this.logoRollover = new EventEmitter();\n        this.logoRollout = new EventEmitter();\n        this.logoClick = new EventEmitter();\n        this.logoLoaded = new EventEmitter();\n        this.logoLoadError = new EventEmitter();\n        this.beforeExport = new EventEmitter();\n        this.exported = new EventEmitter();\n        this.exportCancelled = new EventEmitter();\n        this.beforePrint = new EventEmitter();\n        this.printComplete = new EventEmitter();\n        this.printCancelled = new EventEmitter();\n        this.dataLabelClick = new EventEmitter();\n        this.dataLabelRollOver = new EventEmitter();\n        this.dataLabelRollOut = new EventEmitter();\n        this.scrollStart = new EventEmitter();\n        this.scrollEnd = new EventEmitter();\n        this.onScroll = new EventEmitter();\n        this.zoomReset = new EventEmitter();\n        this.zoomedOut = new EventEmitter();\n        this.zoomedIn = new EventEmitter();\n        this.zoomed = new EventEmitter();\n        this.zoomModeChanged = new EventEmitter();\n        this.pinned = new EventEmitter();\n        this.dataRestored = new EventEmitter();\n        this.beforeDataSubmit = new EventEmitter();\n        this.dataSubmitError = new EventEmitter();\n        this.dataSubmitted = new EventEmitter();\n        this.dataSubmitCancelled = new EventEmitter();\n        this.chartUpdated = new EventEmitter();\n        this.nodeAdded = new EventEmitter();\n        this.nodeUpdated = new EventEmitter();\n        this.nodeDeleted = new EventEmitter();\n        this.connectorAdded = new EventEmitter();\n        this.connectorUpdated = new EventEmitter();\n        this.connectorDeleted = new EventEmitter();\n        this.labelAdded = new EventEmitter();\n        this.labelDeleted = new EventEmitter();\n        this.selectionRemoved = new EventEmitter();\n        this.selectionStart = new EventEmitter();\n        this.selectionEnd = new EventEmitter();\n        this.labelClick = new EventEmitter();\n        this.labelRollOver = new EventEmitter();\n        this.labelRollOut = new EventEmitter();\n        this.labelDragStart = new EventEmitter();\n        this.labelDragEnd = new EventEmitter();\n        this.dataplotDragStart = new EventEmitter();\n        this.dataplotDragEnd = new EventEmitter();\n        this.processClick = new EventEmitter();\n        this.processRollOver = new EventEmitter();\n        this.processRollOut = new EventEmitter();\n        this.categoryClick = new EventEmitter();\n        this.categoryRollOver = new EventEmitter();\n        this.categoryRollOut = new EventEmitter();\n        this.milestoneClick = new EventEmitter();\n        this.milestoneRollOver = new EventEmitter();\n        this.milestoneRollOut = new EventEmitter();\n        this.chartTypeChanged = new EventEmitter();\n        this.overlayButtonClick = new EventEmitter();\n        this.loaded = new EventEmitter();\n        this.rendered = new EventEmitter();\n        this.drawComplete = new EventEmitter();\n        this.renderComplete = new EventEmitter();\n        this.dataInvalid = new EventEmitter();\n        this.dataXMLInvalid = new EventEmitter();\n        this.dataLoaded = new EventEmitter();\n        this.noDataToDisplay = new EventEmitter();\n        this.legendPointerDragStart = new EventEmitter();\n        this.legendPointerDragStop = new EventEmitter();\n        this.legendRangeUpdated = new EventEmitter();\n        this.alertComplete = new EventEmitter();\n        this.realTimeUpdateError = new EventEmitter();\n        this.dataplotRollOver = new EventEmitter();\n        this.dataplotRollOut = new EventEmitter();\n        this.dataplotClick = new EventEmitter();\n        this.linkClicked = new EventEmitter();\n        this.beforeRender = new EventEmitter();\n        this.renderCancelled = new EventEmitter();\n        this.beforeResize = new EventEmitter();\n        this.resized = new EventEmitter();\n        this.resizeCancelled = new EventEmitter();\n        this.beforeDispose = new EventEmitter();\n        this.disposed = new EventEmitter();\n        this.disposeCancelled = new EventEmitter();\n        this.linkedChartInvoked = new EventEmitter();\n        this.beforeDrillDown = new EventEmitter();\n        this.drillDown = new EventEmitter();\n        this.beforeDrillUp = new EventEmitter();\n        this.drillUp = new EventEmitter();\n        this.drillDownCancelled = new EventEmitter();\n        this.drillUpCancelled = new EventEmitter();\n        this.initialized = new EventEmitter();\n        this.oldDataSource = this.dataSource;\n        this.constructerParams = {\n            type: true,\n            id: true,\n            width: true,\n            height: true,\n            renderAt: true,\n            dataFormat: true,\n            dataSource: true,\n            events: true,\n            link: true,\n            showDataLoadingMessage: true,\n            showChartLoadingMessage: true,\n            baseChartMessageFont: true,\n            baseChartMessageFontSize: true,\n            baseChartMessageColor: true,\n            dataLoadStartMessage: true,\n            dataLoadErrorMessage: true,\n            dataInvalidMessage: true,\n            dataEmptyMessage: true,\n            typeNotSupportedMessage: true,\n            loadMessage: true,\n            renderErrorMessage: true,\n            containerBackgroundColor: true,\n            containerBackgroundOpacity: true,\n            containerClassName: true,\n            baseChartMessageImageHAlign: true,\n            baseChartMessageImageVAlign: true,\n            baseChartMessageImageAlpha: true,\n            baseChartMessageImageScale: true,\n            typeNotSupportedMessageImageHAlign: true,\n            typeNotSupportedMessageImageVAlign: true,\n            typeNotSupportedMessageImageAlpha: true,\n            typeNotSupportedMessageImageScale: true,\n            dataLoadErrorMessageImageHAlign: true,\n            dataLoadErrorMessageImageVAlign: true,\n            dataLoadErrorMessageImageAlpha: true,\n            dataLoadErrorMessageImageScale: true,\n            dataLoadStartMessageImageHAlign: true,\n            dataLoadStartMessageImageVAlign: true,\n            dataLoadStartMessageImageAlpha: true,\n            dataLoadStartMessageImageScale: true,\n            dataInvalidMessageImageHAlign: true,\n            dataInvalidMessageImageVAlign: true,\n            dataInvalidMessageImageAlpha: true,\n            dataInvalidMessageImageScale: true,\n            dataEmptyMessageImageHAlign: true,\n            dataEmptyMessageImageVAlign: true,\n            dataEmptyMessageImageAlpha: true,\n            dataEmptyMessageImageScale: true,\n            renderErrorMessageImageHAlign: true,\n            renderErrorMessageImageVAlign: true,\n            renderErrorMessageImageAlpha: true,\n            renderErrorMessageImageScale: true,\n            loadMessageImageHAlign: true,\n            loadMessageImageVAlign: true,\n            loadMessageImageAlpha: true,\n            loadMessageImageScale: true,\n            chartConfig: true\n        };\n        this.element = element;\n        this.fusionchartsService = fusionchartsService;\n    }\n    // @ViewChild('samplediv') chartContainer: ElementRef;\n    FusionChartsComponent.prototype.ngOnInit = function () {\n        this.oldDataSource = JSON.stringify(this.dataSource);\n        this.placeholder = this.placeholder || 'FusionCharts will render here';\n    };\n    FusionChartsComponent.prototype.ngOnChanges = function (changes) {\n        for (var _i = 0, _a = Object.keys(changes); _i < _a.length; _i++) {\n            var i = _a[_i];\n            var key = i.charAt(0).toUpperCase() + i.slice(1), THIS = this, fnName = \"update\" + key;\n            if (THIS[fnName]) {\n                THIS[fnName]();\n            }\n        }\n    };\n    FusionChartsComponent.prototype.ngDoCheck = function () {\n        var data = JSON.stringify(this.dataSource);\n        if (this.oldDataSource === data) {\n        }\n        else {\n            this.updateChartData();\n            this.oldDataSource = data;\n        }\n    };\n    FusionChartsComponent.prototype.updateChartData = function () {\n        var dataFormat = this.configObj.dataFormat || 'json', data = this.dataSource;\n        if (this.chartObj) {\n            this.chartObj.setChartData(data, dataFormat);\n        }\n    };\n    FusionChartsComponent.prototype.updateWidth = function () {\n        if (this.chartObj) {\n            this.chartObj.resizeTo({\n                w: this.width\n            });\n        }\n    };\n    FusionChartsComponent.prototype.updateHeight = function () {\n        if (this.chartObj) {\n            this.chartObj.resizeTo({\n                h: this.height\n            });\n        }\n    };\n    FusionChartsComponent.prototype.updateType = function () {\n        if (this.chartObj) {\n            this.chartObj.chartType(this.type);\n        }\n    };\n    FusionChartsComponent.prototype.attachChartEventListener = function (chartObj, eventName) {\n        var _this_1 = this;\n        chartObj.addEventListener(eventName, function (eventObj, dataObj) {\n            var fEventObj = { eventObj: {}, dataObj: {} };\n            if (eventObj)\n                fEventObj.eventObj = eventObj;\n            if (dataObj)\n                fEventObj.dataObj = dataObj;\n            _this_1[eventName].emit(fEventObj);\n        });\n    };\n    FusionChartsComponent.prototype.attachAllChartEvents = function (chartObj, eventList) {\n        var _this_1 = this;\n        eventList.forEach(function (eventName) {\n            _this_1.attachChartEventListener(chartObj, eventName);\n        });\n    };\n    FusionChartsComponent.prototype.ngAfterViewInit = function () {\n        var _this = this, params = _this.constructerParams, configObj = _this.configObj || (_this.configObj = {});\n        var _chartConfig = _this.chartConfig || {};\n        if (typeof _chartConfig === 'string') {\n            _chartConfig = JSON.parse(_chartConfig);\n        }\n        for (var _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {\n            var i = _a[_i];\n            var value = _this[i] || _chartConfig[i];\n            if (value) {\n                configObj[i] = value;\n            }\n        }\n        if (configObj['type']) {\n            _this.chartObj = FusionChartsConstructor(_this.fusionchartsService, configObj);\n            this.initialized.emit({ chart: _this.chartObj });\n            // configObj['renderAt'] = 'container-' + _this.chartObj.id;\n            // _this.containerId = _this.chartObj.id;\n            this.zone.runOutsideAngular(function () {\n                setTimeout(function () {\n                    _this.attachAllChartEvents(_this.chartObj, _this.eventList);\n                    _this.chartObj.render(_this.element.nativeElement.querySelector('div'));\n                }, 1);\n            });\n        }\n    };\n    FusionChartsComponent.prototype.ngOnDestroy = function () {\n        this.chartObj.dispose();\n    };\n    return FusionChartsComponent;\n}());\nexport { FusionChartsComponent };\n//# sourceMappingURL=fusioncharts.component.js.map\n",null]}