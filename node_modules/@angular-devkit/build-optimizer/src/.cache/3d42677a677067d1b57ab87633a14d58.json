{"remainingRequest":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\InformXUI\\node_modules\\@okta\\okta-auth-js\\lib\\http.js","dependencies":[{"path":"D:\\InformXUI\\node_modules\\@okta\\okta-auth-js\\lib\\http.js","mtime":1561962764625},{"path":"D:\\InformXUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1561962767981},{"path":"D:\\InformXUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1561962756102}],"contextDependencies":[],"result":["/*!\r\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\r\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\r\n *\r\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *\r\n * See the License for the specific language governing permissions and limitations under the License.\r\n *\r\n */\r\n\r\n/* eslint-disable complexity */\r\nvar util = require('./util');\r\nvar Q = require('q');\r\nvar AuthApiError = require('./errors/AuthApiError');\r\nvar config = require('./config');\r\n\r\nfunction httpRequest(sdk, options) {\r\n  options = options || {};\r\n  var url = options.url,\r\n      method = options.method,\r\n      args = options.args,\r\n      saveAuthnState = options.saveAuthnState,\r\n      accessToken = options.accessToken,\r\n      storageUtil = sdk.options.storageUtil,\r\n      storage = storageUtil.storage,\r\n      httpCache = storageUtil.getHttpCache();\r\n\r\n  if (options.cacheResponse) {\r\n    var cacheContents = httpCache.getStorage();\r\n    var cachedResponse = cacheContents[url];\r\n    if (cachedResponse && Date.now()/1000 < cachedResponse.expiresAt) {\r\n      return Q.resolve(cachedResponse.response);\r\n    }\r\n  }\r\n\r\n  var headers = {\r\n    'Accept': 'application/json',\r\n    'Content-Type': 'application/json',\r\n    'X-Okta-User-Agent-Extended': sdk.userAgent\r\n  };\r\n  util.extend(headers, sdk.options.headers, options.headers);\r\n\r\n  if (accessToken && util.isString(accessToken)) {\r\n    headers['Authorization'] = 'Bearer ' + accessToken;\r\n  }\r\n\r\n  var ajaxOptions = {\r\n    headers: headers,\r\n    data: args || undefined\r\n  };\r\n\r\n  var err, res;\r\n  return new Q(sdk.options.httpRequestClient(method, url, ajaxOptions))\r\n    .then(function(resp) {\r\n      res = resp.responseText;\r\n      if (res && util.isString(res)) {\r\n        res = JSON.parse(res);\r\n      }\r\n\r\n      if (saveAuthnState) {\r\n        if (!res.stateToken) {\r\n          storage.delete(config.STATE_TOKEN_KEY_NAME);\r\n        }\r\n      }\r\n\r\n      if (res && res.stateToken && res.expiresAt) {\r\n        storage.set(config.STATE_TOKEN_KEY_NAME, res.stateToken, res.expiresAt);\r\n      }\r\n\r\n      if (res && options.cacheResponse) {\r\n        httpCache.updateStorage(url, {\r\n          expiresAt: Math.floor(Date.now()/1000) + config.DEFAULT_CACHE_DURATION,\r\n          response: res\r\n        });\r\n      }\r\n\r\n      return res;\r\n    })\r\n    .fail(function(resp) {\r\n      var serverErr = resp.responseText || {};\r\n      if (util.isString(serverErr)) {\r\n        try {\r\n          serverErr = JSON.parse(serverErr);\r\n        } catch (e) {\r\n          serverErr = {\r\n            errorSummary: 'Unknown error'\r\n          };\r\n        }\r\n      }\r\n\r\n      if (resp.status >= 500) {\r\n        serverErr.errorSummary = 'Unknown error';\r\n      }\r\n\r\n      if (sdk.options.transformErrorXHR) {\r\n        resp = sdk.options.transformErrorXHR(util.clone(resp));\r\n      }\r\n\r\n      err = new AuthApiError(serverErr, resp);\r\n\r\n      if (err.errorCode === 'E0000011') {\r\n        storage.delete(config.STATE_TOKEN_KEY_NAME);\r\n      }\r\n\r\n      throw err;\r\n    });\r\n}\r\n\r\nfunction get(sdk, url, options) {\r\n  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;\r\n  var getOptions = {\r\n    url: url,\r\n    method: 'GET'\r\n  };\r\n  util.extend(getOptions, options);\r\n  return httpRequest(sdk, getOptions);\r\n}\r\n\r\nfunction post(sdk, url, args, options) {\r\n  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;\r\n  var postOptions = {\r\n    url: url,\r\n    method: 'POST',\r\n    args: args,\r\n    saveAuthnState: true\r\n  };\r\n  util.extend(postOptions, options);\r\n  return httpRequest(sdk, postOptions);\r\n}\r\n\r\nmodule.exports = {\r\n  get: get,\r\n  post: post,\r\n  httpRequest: httpRequest\r\n};\r\n",null]}