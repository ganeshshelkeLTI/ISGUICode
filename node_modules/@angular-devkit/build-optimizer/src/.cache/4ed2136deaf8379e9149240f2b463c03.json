{"remainingRequest":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\ISG-InformX\\node_modules\\ng2-popover\\Popover.js","dependencies":[{"path":"D:\\ISG-InformX\\node_modules\\ng2-popover\\Popover.js","mtime":1562860498606},{"path":"D:\\ISG-InformX\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1562860456543},{"path":"D:\\ISG-InformX\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1562860430677}],"contextDependencies":[],"result":["\"use strict\";\nvar core_1 = require(\"@angular/core\");\nvar PopoverContent_1 = require(\"./PopoverContent\");\nvar Popover = (function () {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n    function Popover(viewContainerRef, resolver) {\n        this.viewContainerRef = viewContainerRef;\n        this.resolver = resolver;\n        // -------------------------------------------------------------------------\n        // Properties\n        // -------------------------------------------------------------------------\n        this.PopoverComponent = PopoverContent_1.PopoverContent;\n        this.popoverOnHover = false;\n        this.popoverDismissTimeout = 0;\n        this.onShown = new core_1.EventEmitter();\n        this.onHidden = new core_1.EventEmitter();\n    }\n    // -------------------------------------------------------------------------\n    // Event listeners\n    // -------------------------------------------------------------------------\n    Popover.prototype.showOrHideOnClick = function () {\n        if (this.popoverOnHover)\n            return;\n        if (this.popoverDisabled)\n            return;\n        this.toggle();\n    };\n    Popover.prototype.showOnHover = function () {\n        if (!this.popoverOnHover)\n            return;\n        if (this.popoverDisabled)\n            return;\n        this.show();\n    };\n    Popover.prototype.hideOnHover = function () {\n        if (this.popoverCloseOnMouseOutside)\n            return; // don't do anything since not we control this\n        if (!this.popoverOnHover)\n            return;\n        if (this.popoverDisabled)\n            return;\n        this.hide();\n    };\n    Popover.prototype.ngOnChanges = function (changes) {\n        if (changes[\"popoverDisabled\"]) {\n            if (changes[\"popoverDisabled\"].currentValue) {\n                this.hide();\n            }\n        }\n    };\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    Popover.prototype.toggle = function () {\n        if (!this.visible) {\n            this.show();\n        }\n        else {\n            this.hide();\n        }\n    };\n    Popover.prototype.show = function () {\n        var _this = this;\n        if (this.visible)\n            return;\n        this.visible = true;\n        if (typeof this.content === \"string\") {\n            var factory = this.resolver.resolveComponentFactory(this.PopoverComponent);\n            if (!this.visible)\n                return;\n            this.popover = this.viewContainerRef.createComponent(factory);\n            var popover = this.popover.instance;\n            popover.popover = this;\n            popover.content = this.content;\n            if (this.popoverPlacement !== undefined)\n                popover.placement = this.popoverPlacement;\n            if (this.popoverAnimation !== undefined)\n                popover.animation = this.popoverAnimation;\n            if (this.popoverTitle !== undefined)\n                popover.title = this.popoverTitle;\n            if (this.popoverCloseOnClickOutside !== undefined)\n                popover.closeOnClickOutside = this.popoverCloseOnClickOutside;\n            if (this.popoverCloseOnMouseOutside !== undefined)\n                popover.closeOnMouseOutside = this.popoverCloseOnMouseOutside;\n            popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });\n            // if dismissTimeout option is set, then this popover will be dismissed in dismissTimeout time\n            if (this.popoverDismissTimeout > 0)\n                setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);\n        }\n        else {\n            var popover = this.content;\n            popover.popover = this;\n            if (this.popoverPlacement !== undefined)\n                popover.placement = this.popoverPlacement;\n            if (this.popoverAnimation !== undefined)\n                popover.animation = this.popoverAnimation;\n            if (this.popoverTitle !== undefined)\n                popover.title = this.popoverTitle;\n            if (this.popoverCloseOnClickOutside !== undefined)\n                popover.closeOnClickOutside = this.popoverCloseOnClickOutside;\n            if (this.popoverCloseOnMouseOutside !== undefined)\n                popover.closeOnMouseOutside = this.popoverCloseOnMouseOutside;\n            popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });\n            // if dismissTimeout option is set, then this popover will be dismissed in dismissTimeout time\n            if (this.popoverDismissTimeout > 0)\n                setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);\n            popover.show();\n        }\n        this.onShown.emit(this);\n    };\n    Popover.prototype.hide = function () {\n        if (!this.visible)\n            return;\n        this.visible = false;\n        if (this.popover)\n            this.popover.destroy();\n        if (this.content instanceof PopoverContent_1.PopoverContent)\n            this.content.hideFromPopover();\n        this.onHidden.emit(this);\n    };\n    Popover.prototype.getElement = function () {\n        return this.viewContainerRef.element.nativeElement;\n    };\n    Popover.decorators = [\n        { type: core_1.Directive, args: [{\n                    selector: \"[popover]\",\n                    exportAs: \"popover\"\n                },] },\n    ];\n    Popover.propDecorators = {\n        'content': [{ type: core_1.Input, args: [\"popover\",] },],\n        'popoverDisabled': [{ type: core_1.Input },],\n        'popoverAnimation': [{ type: core_1.Input },],\n        'popoverPlacement': [{ type: core_1.Input },],\n        'popoverTitle': [{ type: core_1.Input },],\n        'popoverOnHover': [{ type: core_1.Input },],\n        'popoverCloseOnClickOutside': [{ type: core_1.Input },],\n        'popoverCloseOnMouseOutside': [{ type: core_1.Input },],\n        'popoverDismissTimeout': [{ type: core_1.Input },],\n        'onShown': [{ type: core_1.Output },],\n        'onHidden': [{ type: core_1.Output },],\n        'showOrHideOnClick': [{ type: core_1.HostListener, args: [\"click\",] },],\n        'showOnHover': [{ type: core_1.HostListener, args: [\"focusin\",] }, { type: core_1.HostListener, args: [\"mouseenter\",] },],\n        'hideOnHover': [{ type: core_1.HostListener, args: [\"focusout\",] }, { type: core_1.HostListener, args: [\"mouseleave\",] },],\n    };\n    return Popover;\n}());\nexports.Popover = Popover;\n",null]}