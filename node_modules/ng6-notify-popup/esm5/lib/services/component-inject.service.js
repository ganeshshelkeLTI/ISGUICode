/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import * as i0 from "@angular/core";
var ComponentInjectService = /** @class */ (function () {
    function ComponentInjectService(applicationRef, componentFactoryResolver, injector) {
        this.applicationRef = applicationRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ComponentInjectService.prototype.getRootViewContainer = /**
     * @return {?}
     */
    function () {
        if (this._container)
            return this._container;
        /** @type {?} */
        var rootComponents = this.applicationRef.components;
        if (rootComponents.length)
            return rootComponents[0];
        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer.');
    };
    /**
     * @param {?} container
     * @return {?}
     */
    ComponentInjectService.prototype.setRootViewContainer = /**
     * @param {?} container
     * @return {?}
     */
    function (container) {
        this._container = container;
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ComponentInjectService.prototype.getComponentRootNode = /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
    };
    /**
     * @return {?}
     */
    ComponentInjectService.prototype.getRootViewContainerNode = /**
     * @return {?}
     */
    function () {
        return this.getComponentRootNode(this.getRootViewContainer());
    };
    /**
     * @param {?} component
     * @param {?} options
     * @return {?}
     */
    ComponentInjectService.prototype.projectComponentInputs = /**
     * @param {?} component
     * @param {?} options
     * @return {?}
     */
    function (component, options) {
        if (options) {
            /** @type {?} */
            var props = Object.getOwnPropertyNames(options);
            try {
                for (var props_1 = tslib_1.__values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                    var prop = props_1_1.value;
                    component.instance[prop] = options[prop];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return component;
        var e_1, _a;
    };
    /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    ComponentInjectService.prototype.appendComponentToBody = /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    function (componentClass, options, location) {
        if (options === void 0) { options = {}; }
        return this.appendComponent(componentClass, options, this.getRootViewContainerNode());
    };
    /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    ComponentInjectService.prototype.appendComponent = /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    function (componentClass, options, location) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);
        /** @type {?} */
        var componentRef = componentFactory.create(this.injector);
        /** @type {?} */
        var appRef = this.applicationRef;
        /** @type {?} */
        var componentRootNode = this.getComponentRootNode(componentRef);
        // project the options passed to the component instance
        this.projectComponentInputs(componentRef, options);
        // ApplicationRef's attachView and detachView methods are in Angular ^2.2.1 but not before.
        // The `else` clause here can be removed once 2.2.1 is released.
        if (appRef['attachView']) {
            appRef.attachView(componentRef.hostView);
            componentRef.onDestroy(function () {
                appRef.detachView(componentRef.hostView);
            });
        }
        else {
            /** @type {?} */
            var changeDetectorRef_1 = componentRef.changeDetectorRef;
            appRef.registerChangeDetector(changeDetectorRef_1);
            componentRef.onDestroy(function () {
                appRef.unregisterChangeDetector(changeDetectorRef_1);
                // Normally the ViewContainer will remove the component's nodes from the DOM.
                // Without a ViewContainer, we need to manually remove the nodes.
                if (componentRootNode.parentNode) {
                    componentRootNode.parentNode.removeChild(componentRootNode);
                }
            });
        }
        location.appendChild(componentRootNode);
        return componentRef;
    };
    /**
     * @param {?} compRef
     * @return {?}
     */
    ComponentInjectService.prototype.destroyComponent = /**
     * @param {?} compRef
     * @return {?}
     */
    function (compRef) {
        this.applicationRef.detachView(compRef.hostView);
        compRef.destroy();
    };
    ComponentInjectService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ComponentInjectService.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    /** @nocollapse */ ComponentInjectService.ngInjectableDef = i0.defineInjectable({ factory: function ComponentInjectService_Factory() { return new ComponentInjectService(i0.inject(i0.ApplicationRef), i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR)); }, token: ComponentInjectService, providedIn: "root" });
    return ComponentInjectService;
}());
export { ComponentInjectService };
if (false) {
    /** @type {?} */
    ComponentInjectService.prototype._container;
    /** @type {?} */
    ComponentInjectService.prototype.applicationRef;
    /** @type {?} */
    ComponentInjectService.prototype.componentFactoryResolver;
    /** @type {?} */
    ComponentInjectService.prototype.injector;
}

//# sourceMappingURL=data:application/json;base64,