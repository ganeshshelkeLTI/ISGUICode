/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NotificationConfig } from '../notificationConfig';
import { Ng6NotifyPopupComponent } from '../ng6-notify-popup.component';
import { ComponentInjectService } from './component-inject.service';
import * as i0 from "@angular/core";
import * as i1 from "./component-inject.service";
export class Ng6NotifyPopupService {
    /**
     * @param {?} compInject
     */
    constructor(compInject) {
        this.compInject = compInject;
        this.defaultConfigVar = new NotificationConfig('bottom', 3000, 'error', 'body', false, '');
    }
    /**
     * @param {?} configObject
     * @return {?}
     */
    defaultConfig(configObject) {
        this.setConfig(configObject, this.defaultConfigVar);
    }
    /**
     * @return {?}
     */
    destroy() {
        clearTimeout(this.cleartime);
        clearTimeout(this.clearhide);
        if (this.activeNotificationCompRef) {
            this.compInject.destroyComponent(this.activeNotificationCompRef);
            this.activeNotificationCompRef = null;
        }
    }
    /**
     * @param {?} notificationText
     * @param {?=} notificationConfig
     * @return {?}
     */
    show(notificationText, notificationConfig) {
        this.destroy();
        /** @type {?} */
        let config = new NotificationConfig(this.defaultConfigVar.position, this.defaultConfigVar.duration, this.defaultConfigVar.type, this.defaultConfigVar.location, this.defaultConfigVar.sticky, notificationText);
        if (notificationConfig != undefined && notificationConfig != null)
            this.setConfig(notificationConfig, config);
        if (config.location == 'body')
            this.activeNotificationCompRef = this.compInject.appendComponentToBody(Ng6NotifyPopupComponent, config, document.querySelector('body'));
        else
            this.activeNotificationCompRef = this.compInject.appendComponent(Ng6NotifyPopupComponent, config, document.querySelector(config.location));
        this.activeNotificationCompRef.instance.fade = 'show';
        if (!this.activeNotificationCompRef.instance.sticky) {
            this.cleartime = window.setTimeout(() => {
                this.activeNotificationCompRef.instance.fade = 'hide';
                this.clearhide = window.setTimeout(() => {
                    this.destroy();
                }, 700);
            }, config.duration);
        }
        else
            this.activeNotificationCompRef.instance.destroyComponent.subscribe((value) => {
                this.activeNotificationCompRef.instance.fade = 'hide';
                this.clearhide = window.setTimeout(() => {
                    this.destroy();
                }, 700);
            });
    }
    /**
     * @param {?} configObject
     * @param {?} targetObject
     * @return {?}
     */
    setConfig(configObject, targetObject) {
        /** @type {?} */
        const props = Object.getOwnPropertyNames(configObject);
        for (const prop of props) {
            (/** @type {?} */ (targetObject))[prop] = (/** @type {?} */ (configObject))[prop];
        }
    }
}
Ng6NotifyPopupService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
Ng6NotifyPopupService.ctorParameters = () => [
    { type: ComponentInjectService }
];
/** @nocollapse */ Ng6NotifyPopupService.ngInjectableDef = i0.defineInjectable({ factory: function Ng6NotifyPopupService_Factory() { return new Ng6NotifyPopupService(i0.inject(i1.ComponentInjectService)); }, token: Ng6NotifyPopupService, providedIn: "root" });
if (false) {
    /** @type {?} */
    Ng6NotifyPopupService.prototype.defaultConfigVar;
    /** @type {?} */
    Ng6NotifyPopupService.prototype.activeNotificationCompRef;
    /** @type {?} */
    Ng6NotifyPopupService.prototype.cleartime;
    /** @type {?} */
    Ng6NotifyPopupService.prototype.clearhide;
    /** @type {?} */
    Ng6NotifyPopupService.prototype.compInject;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmc2LW5vdGlmeS1wb3B1cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmc2LW5vdGlmeS1wb3B1cC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9uZzYtbm90aWZ5LXBvcHVwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFLcEUsTUFBTTs7OztJQU1KLFlBQW9CLFVBQWtDO1FBQWxDLGVBQVUsR0FBVixVQUFVLENBQXdCO2dDQUxQLElBQUksa0JBQWtCLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUM7S0FNaEg7Ozs7O0lBRU0sYUFBYSxDQUFDLFlBQW9CO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOzs7OztJQUkvQyxPQUFPO1FBQ1osWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDO1NBQ3ZDOzs7Ozs7O0lBR0ksSUFBSSxDQUFDLGdCQUF3QixFQUFFLGtCQUEyQjtRQUMvRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7O1FBQ2YsSUFBSSxNQUFNLEdBQXVCLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDcE8sRUFBRSxDQUFDLENBQUMsa0JBQWtCLElBQUksU0FBUyxJQUFJLGtCQUFrQixJQUFJLElBQUksQ0FBQztZQUNoRSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDO1lBQzVCLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLHVCQUF1QixFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDMUksSUFBSTtZQUNGLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUU3SSxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFFdEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDdEMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO2dCQUN0RCxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO29CQUN0QyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7aUJBQ2hCLEVBQUUsR0FBRyxDQUFDLENBQUE7YUFDUixFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyQjtRQUNELElBQUk7WUFDRixJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUMzRSxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7Z0JBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDaEIsRUFBRSxHQUFHLENBQUMsQ0FBQTthQUNSLENBQUMsQ0FBQzs7Ozs7OztJQUdDLFNBQVMsQ0FBQyxZQUFvQixFQUFFLFlBQWdDOztRQUN0RSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDdkQsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6QixtQkFBTSxZQUFZLEVBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxtQkFBTSxZQUFZLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2RDs7OztZQTNESixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFKUSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkNvbmZpZyB9IGZyb20gJy4uL25vdGlmaWNhdGlvbkNvbmZpZyc7XG5pbXBvcnQgeyBOZzZOb3RpZnlQb3B1cENvbXBvbmVudCB9IGZyb20gJy4uL25nNi1ub3RpZnktcG9wdXAuY29tcG9uZW50JztcbmltcG9ydCB7IENvbXBvbmVudEluamVjdFNlcnZpY2UgfSBmcm9tICcuL2NvbXBvbmVudC1pbmplY3Quc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nNk5vdGlmeVBvcHVwU2VydmljZSB7XG4gIHByaXZhdGUgZGVmYXVsdENvbmZpZ1ZhcjogTm90aWZpY2F0aW9uQ29uZmlnID0gbmV3IE5vdGlmaWNhdGlvbkNvbmZpZygnYm90dG9tJywgMzAwMCwgJ2Vycm9yJywgJ2JvZHknLCBmYWxzZSwgJycpO1xuICBwcml2YXRlIGFjdGl2ZU5vdGlmaWNhdGlvbkNvbXBSZWY6IENvbXBvbmVudFJlZjxhbnk+O1xuICBwcml2YXRlIGNsZWFydGltZTogbnVtYmVyO1xuICBwcml2YXRlIGNsZWFyaGlkZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcEluamVjdDogQ29tcG9uZW50SW5qZWN0U2VydmljZSkge1xuICB9XG5cbiAgcHVibGljIGRlZmF1bHRDb25maWcoY29uZmlnT2JqZWN0OiBPYmplY3QpOiB2b2lkIHtcbiAgICB0aGlzLnNldENvbmZpZyhjb25maWdPYmplY3QsIHRoaXMuZGVmYXVsdENvbmZpZ1Zhcik7XG5cbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCk6IHZvaWQge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmNsZWFydGltZSk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xlYXJoaWRlKTtcbiAgICBpZiAodGhpcy5hY3RpdmVOb3RpZmljYXRpb25Db21wUmVmKSB7XG4gICAgICB0aGlzLmNvbXBJbmplY3QuZGVzdHJveUNvbXBvbmVudCh0aGlzLmFjdGl2ZU5vdGlmaWNhdGlvbkNvbXBSZWYpO1xuICAgICAgdGhpcy5hY3RpdmVOb3RpZmljYXRpb25Db21wUmVmID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2hvdyhub3RpZmljYXRpb25UZXh0OiBzdHJpbmcsIG5vdGlmaWNhdGlvbkNvbmZpZz86IE9iamVjdCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIGxldCBjb25maWc6IE5vdGlmaWNhdGlvbkNvbmZpZyA9IG5ldyBOb3RpZmljYXRpb25Db25maWcodGhpcy5kZWZhdWx0Q29uZmlnVmFyLnBvc2l0aW9uLCB0aGlzLmRlZmF1bHRDb25maWdWYXIuZHVyYXRpb24sIHRoaXMuZGVmYXVsdENvbmZpZ1Zhci50eXBlLCB0aGlzLmRlZmF1bHRDb25maWdWYXIubG9jYXRpb24sIHRoaXMuZGVmYXVsdENvbmZpZ1Zhci5zdGlja3ksIG5vdGlmaWNhdGlvblRleHQpO1xuICAgIGlmIChub3RpZmljYXRpb25Db25maWcgIT0gdW5kZWZpbmVkICYmIG5vdGlmaWNhdGlvbkNvbmZpZyAhPSBudWxsKVxuICAgICAgdGhpcy5zZXRDb25maWcobm90aWZpY2F0aW9uQ29uZmlnLCBjb25maWcpO1xuICAgIGlmIChjb25maWcubG9jYXRpb24gPT0gJ2JvZHknKVxuICAgICAgdGhpcy5hY3RpdmVOb3RpZmljYXRpb25Db21wUmVmID0gdGhpcy5jb21wSW5qZWN0LmFwcGVuZENvbXBvbmVudFRvQm9keShOZzZOb3RpZnlQb3B1cENvbXBvbmVudCwgY29uZmlnLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykpO1xuICAgIGVsc2VcbiAgICAgIHRoaXMuYWN0aXZlTm90aWZpY2F0aW9uQ29tcFJlZiA9IHRoaXMuY29tcEluamVjdC5hcHBlbmRDb21wb25lbnQoTmc2Tm90aWZ5UG9wdXBDb21wb25lbnQsIGNvbmZpZywgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcubG9jYXRpb24pKTtcblxuICAgIHRoaXMuYWN0aXZlTm90aWZpY2F0aW9uQ29tcFJlZi5pbnN0YW5jZS5mYWRlID0gJ3Nob3cnO1xuXG4gICAgaWYgKCF0aGlzLmFjdGl2ZU5vdGlmaWNhdGlvbkNvbXBSZWYuaW5zdGFuY2Uuc3RpY2t5KSB7XG4gICAgICB0aGlzLmNsZWFydGltZSA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5hY3RpdmVOb3RpZmljYXRpb25Db21wUmVmLmluc3RhbmNlLmZhZGUgPSAnaGlkZSc7XG4gICAgICAgIHRoaXMuY2xlYXJoaWRlID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB9LCA3MDApXG4gICAgICB9LCBjb25maWcuZHVyYXRpb24pO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICB0aGlzLmFjdGl2ZU5vdGlmaWNhdGlvbkNvbXBSZWYuaW5zdGFuY2UuZGVzdHJveUNvbXBvbmVudC5zdWJzY3JpYmUoKHZhbHVlKSA9PiB7XG4gICAgICAgIHRoaXMuYWN0aXZlTm90aWZpY2F0aW9uQ29tcFJlZi5pbnN0YW5jZS5mYWRlID0gJ2hpZGUnO1xuICAgICAgICB0aGlzLmNsZWFyaGlkZSA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgfSwgNzAwKVxuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNldENvbmZpZyhjb25maWdPYmplY3Q6IE9iamVjdCwgdGFyZ2V0T2JqZWN0OiBOb3RpZmljYXRpb25Db25maWcpOiB2b2lkIHtcbiAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNvbmZpZ09iamVjdCk7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIHByb3BzKSB7XG4gICAgICAoPGFueT50YXJnZXRPYmplY3QpW3Byb3BdID0gKDxhbnk+Y29uZmlnT2JqZWN0KVtwcm9wXTtcbiAgICB9XG5cbiAgfVxufVxuIl19