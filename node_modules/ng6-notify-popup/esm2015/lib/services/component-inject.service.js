/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector } from '@angular/core';
import * as i0 from "@angular/core";
export class ComponentInjectService {
    /**
     * @param {?} applicationRef
     * @param {?} componentFactoryResolver
     * @param {?} injector
     */
    constructor(applicationRef, componentFactoryResolver, injector) {
        this.applicationRef = applicationRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    getRootViewContainer() {
        if (this._container)
            return this._container;
        /** @type {?} */
        const rootComponents = this.applicationRef.components;
        if (rootComponents.length)
            return rootComponents[0];
        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer.');
    }
    /**
     * @param {?} container
     * @return {?}
     */
    setRootViewContainer(container) {
        this._container = container;
    }
    /**
     * @param {?} componentRef
     * @return {?}
     */
    getComponentRootNode(componentRef) {
        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
    }
    /**
     * @return {?}
     */
    getRootViewContainerNode() {
        return this.getComponentRootNode(this.getRootViewContainer());
    }
    /**
     * @param {?} component
     * @param {?} options
     * @return {?}
     */
    projectComponentInputs(component, options) {
        if (options) {
            /** @type {?} */
            const props = Object.getOwnPropertyNames(options);
            for (const prop of props) {
                component.instance[prop] = options[prop];
            }
        }
        return component;
    }
    /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    appendComponentToBody(componentClass, options = {}, location) {
        return this.appendComponent(componentClass, options, this.getRootViewContainerNode());
    }
    /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    appendComponent(componentClass, options = {}, location) {
        /** @type {?} */
        let componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);
        /** @type {?} */
        let componentRef = componentFactory.create(this.injector);
        /** @type {?} */
        let appRef = this.applicationRef;
        /** @type {?} */
        let componentRootNode = this.getComponentRootNode(componentRef);
        // project the options passed to the component instance
        this.projectComponentInputs(componentRef, options);
        // ApplicationRef's attachView and detachView methods are in Angular ^2.2.1 but not before.
        // The `else` clause here can be removed once 2.2.1 is released.
        if (appRef['attachView']) {
            appRef.attachView(componentRef.hostView);
            componentRef.onDestroy(() => {
                appRef.detachView(componentRef.hostView);
            });
        }
        else {
            /** @type {?} */
            let changeDetectorRef = componentRef.changeDetectorRef;
            appRef.registerChangeDetector(changeDetectorRef);
            componentRef.onDestroy(() => {
                appRef.unregisterChangeDetector(changeDetectorRef);
                // Normally the ViewContainer will remove the component's nodes from the DOM.
                // Without a ViewContainer, we need to manually remove the nodes.
                if (componentRootNode.parentNode) {
                    componentRootNode.parentNode.removeChild(componentRootNode);
                }
            });
        }
        location.appendChild(componentRootNode);
        return componentRef;
    }
    /**
     * @param {?} compRef
     * @return {?}
     */
    destroyComponent(compRef) {
        this.applicationRef.detachView(compRef.hostView);
        compRef.destroy();
    }
}
ComponentInjectService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
ComponentInjectService.ctorParameters = () => [
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
/** @nocollapse */ ComponentInjectService.ngInjectableDef = i0.defineInjectable({ factory: function ComponentInjectService_Factory() { return new ComponentInjectService(i0.inject(i0.ApplicationRef), i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR)); }, token: ComponentInjectService, providedIn: "root" });
if (false) {
    /** @type {?} */
    ComponentInjectService.prototype._container;
    /** @type {?} */
    ComponentInjectService.prototype.applicationRef;
    /** @type {?} */
    ComponentInjectService.prototype.componentFactoryResolver;
    /** @type {?} */
    ComponentInjectService.prototype.injector;
}

//# sourceMappingURL=data:application/json;base64,