import { Component, EventEmitter, Input, Output, ApplicationRef, ComponentFactoryResolver, Injectable, Injector, NgModule, defineInjectable, inject, INJECTOR } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { __values } from 'tslib';
import { CommonModule } from '@angular/common';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NotificationConfig = /** @class */ (function () {
    function NotificationConfig(position, duration, type, location, sticky, notifyText) {
        this.position = position;
        this.duration = duration;
        this.type = type;
        this.location = location;
        this.sticky = sticky;
        this.notifyText = notifyText;
    }
    return NotificationConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Ng6NotifyPopupComponent = /** @class */ (function () {
    function Ng6NotifyPopupComponent() {
        this.destroyComponent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    Ng6NotifyPopupComponent.prototype.dismiss = /**
     * @return {?}
     */
    function () {
        this.destroyComponent.emit(true);
    };
    Ng6NotifyPopupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'notify',
                    template: "\n    <div [@shrinkOut]=\"fade\" class=\"trb-notify {{'trb-' + type}}\"\n         [ngClass]=\"{'trb-top': position=='top','trb-bottom':position=='bottom','trb-fixed':location=='body','trb-absolute':location!='body','trb-sticky':sticky==true}\">\n      <span class=\"trb-message\">{{notifyText}}</span>\n      <span class=\"trb-dismiss\" (click)=\"dismiss()\">\u00D7</span>\n    </div>",
                    styles: [".trb-notify{color:#fff;cursor:default;font-size:1.3em;left:0;opacity:0;padding:25px 80px;right:0;display:block;text-align:center;user-select:none;z-index:9999;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none}.trb-component{position:absolute}.trb-top{top:0}.trb-bottom{bottom:0}.trb-fixed{position:fixed}.trb-absolute{position:absolute}.trb-dismiss{background-color:#333;border-radius:15px;box-shadow:inset 2px 2px 7px 2px #000;color:#ddd;cursor:pointer;display:none;font-size:1.25em;font-weight:700;height:30px;line-height:30px;opacity:.2;position:absolute;right:40px;text-shadow:1px 1px 5px #000;top:25px;width:30px}.trb-sticky .trb-dismiss{display:block}.trb-dismiss:hover{background-color:#000}.trb-dismiss:active{background-color:#666}@media only screen and (max-width:480px){.trb-notify{font-size:1em;padding:12px 25px}.trb-dismiss{font-size:1em;height:20px;line-height:20px;right:5px;top:5px;width:20px}}.trb-info{background-color:#0e90d2}.trb-error{background-color:#dd514c}.trb-success{background-color:#5eb95e}.trb-warn{background-color:#f37b1d}.trb-grimace{background-color:#8058a5}.trb-prime.trb-info{background-color:#03c}.trb-prime.trb-error{background-color:red}.trb-prime.trb-success{background-color:#0c0}.trb-prime.trb-warn{background-color:#f90}.trb-prime.trb-grimace{background-color:#609}.trb-pastel.trb-info{background-color:#7ea7d8}.trb-pastel.trb-error{background-color:#f6989d}.trb-pastel.trb-success{background-color:#82ca9d}.trb-pastel.trb-warn{background-color:#fdc68a}.trb-pastel.trb-grimace{background-color:#a187be}.trb-pitchy.trb-info{background-color:#003471}.trb-pitchy.trb-error{background-color:#9e0b0f}.trb-pitchy.trb-success{background-color:#007236}.trb-pitchy.trb-warn{background-color:#a36209}.trb-pitchy.trb-grimace{background-color:#440e62}"],
                    animations: [
                        trigger('shrinkOut', [
                            state('show', style({
                                opacity: 1
                            })),
                            state('hide', style({
                                opacity: 0
                            })),
                            transition('show => hide', animate('700ms ease-out')),
                            transition('* => show', animate('700ms ease-out'))
                        ])
                    ]
                },] },
    ];
    Ng6NotifyPopupComponent.propDecorators = {
        position: [{ type: Input }],
        duration: [{ type: Input }],
        type: [{ type: Input }],
        notifyText: [{ type: Input }],
        fade: [{ type: Input }],
        sticky: [{ type: Input }],
        location: [{ type: Input }],
        destroyComponent: [{ type: Output }]
    };
    return Ng6NotifyPopupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ComponentInjectService = /** @class */ (function () {
    function ComponentInjectService(applicationRef, componentFactoryResolver, injector) {
        this.applicationRef = applicationRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ComponentInjectService.prototype.getRootViewContainer = /**
     * @return {?}
     */
    function () {
        if (this._container)
            return this._container;
        /** @type {?} */
        var rootComponents = this.applicationRef.components;
        if (rootComponents.length)
            return rootComponents[0];
        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer.');
    };
    /**
     * @param {?} container
     * @return {?}
     */
    ComponentInjectService.prototype.setRootViewContainer = /**
     * @param {?} container
     * @return {?}
     */
    function (container) {
        this._container = container;
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ComponentInjectService.prototype.getComponentRootNode = /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
    };
    /**
     * @return {?}
     */
    ComponentInjectService.prototype.getRootViewContainerNode = /**
     * @return {?}
     */
    function () {
        return this.getComponentRootNode(this.getRootViewContainer());
    };
    /**
     * @param {?} component
     * @param {?} options
     * @return {?}
     */
    ComponentInjectService.prototype.projectComponentInputs = /**
     * @param {?} component
     * @param {?} options
     * @return {?}
     */
    function (component, options) {
        if (options) {
            /** @type {?} */
            var props = Object.getOwnPropertyNames(options);
            try {
                for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                    var prop = props_1_1.value;
                    component.instance[prop] = options[prop];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return component;
        var e_1, _a;
    };
    /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    ComponentInjectService.prototype.appendComponentToBody = /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    function (componentClass, options, location) {
        if (options === void 0) { options = {}; }
        return this.appendComponent(componentClass, options, this.getRootViewContainerNode());
    };
    /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    ComponentInjectService.prototype.appendComponent = /**
     * @template T
     * @param {?} componentClass
     * @param {?=} options
     * @param {?=} location
     * @return {?}
     */
    function (componentClass, options, location) {
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);
        /** @type {?} */
        var componentRef = componentFactory.create(this.injector);
        /** @type {?} */
        var appRef = this.applicationRef;
        /** @type {?} */
        var componentRootNode = this.getComponentRootNode(componentRef);
        // project the options passed to the component instance
        this.projectComponentInputs(componentRef, options);
        // ApplicationRef's attachView and detachView methods are in Angular ^2.2.1 but not before.
        // The `else` clause here can be removed once 2.2.1 is released.
        if (appRef['attachView']) {
            appRef.attachView(componentRef.hostView);
            componentRef.onDestroy(function () {
                appRef.detachView(componentRef.hostView);
            });
        }
        else {
            /** @type {?} */
            var changeDetectorRef_1 = componentRef.changeDetectorRef;
            appRef.registerChangeDetector(changeDetectorRef_1);
            componentRef.onDestroy(function () {
                appRef.unregisterChangeDetector(changeDetectorRef_1);
                // Normally the ViewContainer will remove the component's nodes from the DOM.
                // Without a ViewContainer, we need to manually remove the nodes.
                if (componentRootNode.parentNode) {
                    componentRootNode.parentNode.removeChild(componentRootNode);
                }
            });
        }
        location.appendChild(componentRootNode);
        return componentRef;
    };
    /**
     * @param {?} compRef
     * @return {?}
     */
    ComponentInjectService.prototype.destroyComponent = /**
     * @param {?} compRef
     * @return {?}
     */
    function (compRef) {
        this.applicationRef.detachView(compRef.hostView);
        compRef.destroy();
    };
    ComponentInjectService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    ComponentInjectService.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    /** @nocollapse */ ComponentInjectService.ngInjectableDef = defineInjectable({ factory: function ComponentInjectService_Factory() { return new ComponentInjectService(inject(ApplicationRef), inject(ComponentFactoryResolver), inject(INJECTOR)); }, token: ComponentInjectService, providedIn: "root" });
    return ComponentInjectService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Ng6NotifyPopupService = /** @class */ (function () {
    function Ng6NotifyPopupService(compInject) {
        this.compInject = compInject;
        this.defaultConfigVar = new NotificationConfig('bottom', 3000, 'error', 'body', false, '');
    }
    /**
     * @param {?} configObject
     * @return {?}
     */
    Ng6NotifyPopupService.prototype.defaultConfig = /**
     * @param {?} configObject
     * @return {?}
     */
    function (configObject) {
        this.setConfig(configObject, this.defaultConfigVar);
    };
    /**
     * @return {?}
     */
    Ng6NotifyPopupService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.cleartime);
        clearTimeout(this.clearhide);
        if (this.activeNotificationCompRef) {
            this.compInject.destroyComponent(this.activeNotificationCompRef);
            this.activeNotificationCompRef = null;
        }
    };
    /**
     * @param {?} notificationText
     * @param {?=} notificationConfig
     * @return {?}
     */
    Ng6NotifyPopupService.prototype.show = /**
     * @param {?} notificationText
     * @param {?=} notificationConfig
     * @return {?}
     */
    function (notificationText, notificationConfig) {
        var _this = this;
        this.destroy();
        /** @type {?} */
        var config = new NotificationConfig(this.defaultConfigVar.position, this.defaultConfigVar.duration, this.defaultConfigVar.type, this.defaultConfigVar.location, this.defaultConfigVar.sticky, notificationText);
        if (notificationConfig != undefined && notificationConfig != null)
            this.setConfig(notificationConfig, config);
        if (config.location == 'body')
            this.activeNotificationCompRef = this.compInject.appendComponentToBody(Ng6NotifyPopupComponent, config, document.querySelector('body'));
        else
            this.activeNotificationCompRef = this.compInject.appendComponent(Ng6NotifyPopupComponent, config, document.querySelector(config.location));
        this.activeNotificationCompRef.instance.fade = 'show';
        if (!this.activeNotificationCompRef.instance.sticky) {
            this.cleartime = window.setTimeout(function () {
                _this.activeNotificationCompRef.instance.fade = 'hide';
                _this.clearhide = window.setTimeout(function () {
                    _this.destroy();
                }, 700);
            }, config.duration);
        }
        else
            this.activeNotificationCompRef.instance.destroyComponent.subscribe(function (value) {
                _this.activeNotificationCompRef.instance.fade = 'hide';
                _this.clearhide = window.setTimeout(function () {
                    _this.destroy();
                }, 700);
            });
    };
    /**
     * @param {?} configObject
     * @param {?} targetObject
     * @return {?}
     */
    Ng6NotifyPopupService.prototype.setConfig = /**
     * @param {?} configObject
     * @param {?} targetObject
     * @return {?}
     */
    function (configObject, targetObject) {
        /** @type {?} */
        var props = Object.getOwnPropertyNames(configObject);
        try {
            for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                var prop = props_1_1.value;
                (/** @type {?} */ (targetObject))[prop] = (/** @type {?} */ (configObject))[prop];
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    };
    Ng6NotifyPopupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    Ng6NotifyPopupService.ctorParameters = function () { return [
        { type: ComponentInjectService }
    ]; };
    /** @nocollapse */ Ng6NotifyPopupService.ngInjectableDef = defineInjectable({ factory: function Ng6NotifyPopupService_Factory() { return new Ng6NotifyPopupService(inject(ComponentInjectService)); }, token: Ng6NotifyPopupService, providedIn: "root" });
    return Ng6NotifyPopupService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var Ng6NotifyPopupModule = /** @class */ (function () {
    function Ng6NotifyPopupModule() {
    }
    /**
     * @return {?}
     */
    Ng6NotifyPopupModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: Ng6NotifyPopupModule,
            providers: [
                Ng6NotifyPopupService,
                ComponentInjectService
            ]
        };
    };
    Ng6NotifyPopupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        BrowserAnimationsModule
                    ],
                    declarations: [
                        Ng6NotifyPopupComponent
                    ],
                    providers: [
                        ComponentInjectService
                    ],
                    entryComponents: [
                        Ng6NotifyPopupComponent
                    ]
                },] },
    ];
    return Ng6NotifyPopupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { Ng6NotifyPopupService, ComponentInjectService, Ng6NotifyPopupComponent, Ng6NotifyPopupModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmc2LW5vdGlmeS1wb3B1cC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmc2LW5vdGlmeS1wb3B1cC9saWIvbm90aWZpY2F0aW9uQ29uZmlnLnRzIiwibmc6Ly9uZzYtbm90aWZ5LXBvcHVwL2xpYi9uZzYtbm90aWZ5LXBvcHVwLmNvbXBvbmVudC50cyIsIm5nOi8vbmc2LW5vdGlmeS1wb3B1cC9saWIvc2VydmljZXMvY29tcG9uZW50LWluamVjdC5zZXJ2aWNlLnRzIiwibmc6Ly9uZzYtbm90aWZ5LXBvcHVwL2xpYi9zZXJ2aWNlcy9uZzYtbm90aWZ5LXBvcHVwLnNlcnZpY2UudHMiLCJuZzovL25nNi1ub3RpZnktcG9wdXAvbGliL25nNi1ub3RpZnktcG9wdXAubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25Db25maWcge1xyXG4gIHBvc2l0aW9uOiBzdHJpbmc7XHJcbiAgZHVyYXRpb246IG51bWJlcjtcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgbG9jYXRpb246IHN0cmluZztcclxuICBzdGlja3k6IGJvb2xlYW47XHJcbiAgbm90aWZ5VGV4dDogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKHBvc2l0aW9uOiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIsIHR5cGU6IHN0cmluZywgbG9jYXRpb246IHN0cmluZywgc3RpY2t5OiBib29sZWFuLCBub3RpZnlUZXh0OiBzdHJpbmcpIHtcclxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XHJcbiAgICB0aGlzLnN0aWNreSA9IHN0aWNreTtcclxuICAgIHRoaXMubm90aWZ5VGV4dCA9IG5vdGlmeVRleHQ7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBhbmltYXRlLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbm90aWZ5JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtAc2hyaW5rT3V0XT1cImZhZGVcIiBjbGFzcz1cInRyYi1ub3RpZnkge3sndHJiLScgKyB0eXBlfX1cIlxuICAgICAgICAgW25nQ2xhc3NdPVwieyd0cmItdG9wJzogcG9zaXRpb249PSd0b3AnLCd0cmItYm90dG9tJzpwb3NpdGlvbj09J2JvdHRvbScsJ3RyYi1maXhlZCc6bG9jYXRpb249PSdib2R5JywndHJiLWFic29sdXRlJzpsb2NhdGlvbiE9J2JvZHknLCd0cmItc3RpY2t5JzpzdGlja3k9PXRydWV9XCI+XG4gICAgICA8c3BhbiBjbGFzcz1cInRyYi1tZXNzYWdlXCI+e3tub3RpZnlUZXh0fX08L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cInRyYi1kaXNtaXNzXCIgKGNsaWNrKT1cImRpc21pc3MoKVwiPsODwpc8L3NwYW4+XG4gICAgPC9kaXY+YCxcbiAgc3R5bGVzOiBbYC50cmItbm90aWZ5e2NvbG9yOiNmZmY7Y3Vyc29yOmRlZmF1bHQ7Zm9udC1zaXplOjEuM2VtO2xlZnQ6MDtvcGFjaXR5OjA7cGFkZGluZzoyNXB4IDgwcHg7cmlnaHQ6MDtkaXNwbGF5OmJsb2NrO3RleHQtYWxpZ246Y2VudGVyO3VzZXItc2VsZWN0Om5vbmU7ei1pbmRleDo5OTk5Oy13ZWJraXQtdG91Y2gtY2FsbG91dDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTsta2h0bWwtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmV9LnRyYi1jb21wb25lbnR7cG9zaXRpb246YWJzb2x1dGV9LnRyYi10b3B7dG9wOjB9LnRyYi1ib3R0b217Ym90dG9tOjB9LnRyYi1maXhlZHtwb3NpdGlvbjpmaXhlZH0udHJiLWFic29sdXRle3Bvc2l0aW9uOmFic29sdXRlfS50cmItZGlzbWlzc3tiYWNrZ3JvdW5kLWNvbG9yOiMzMzM7Ym9yZGVyLXJhZGl1czoxNXB4O2JveC1zaGFkb3c6aW5zZXQgMnB4IDJweCA3cHggMnB4ICMwMDA7Y29sb3I6I2RkZDtjdXJzb3I6cG9pbnRlcjtkaXNwbGF5Om5vbmU7Zm9udC1zaXplOjEuMjVlbTtmb250LXdlaWdodDo3MDA7aGVpZ2h0OjMwcHg7bGluZS1oZWlnaHQ6MzBweDtvcGFjaXR5Oi4yO3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjQwcHg7dGV4dC1zaGFkb3c6MXB4IDFweCA1cHggIzAwMDt0b3A6MjVweDt3aWR0aDozMHB4fS50cmItc3RpY2t5IC50cmItZGlzbWlzc3tkaXNwbGF5OmJsb2NrfS50cmItZGlzbWlzczpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiMwMDB9LnRyYi1kaXNtaXNzOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiM2NjZ9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjQ4MHB4KXsudHJiLW5vdGlmeXtmb250LXNpemU6MWVtO3BhZGRpbmc6MTJweCAyNXB4fS50cmItZGlzbWlzc3tmb250LXNpemU6MWVtO2hlaWdodDoyMHB4O2xpbmUtaGVpZ2h0OjIwcHg7cmlnaHQ6NXB4O3RvcDo1cHg7d2lkdGg6MjBweH19LnRyYi1pbmZve2JhY2tncm91bmQtY29sb3I6IzBlOTBkMn0udHJiLWVycm9ye2JhY2tncm91bmQtY29sb3I6I2RkNTE0Y30udHJiLXN1Y2Nlc3N7YmFja2dyb3VuZC1jb2xvcjojNWViOTVlfS50cmItd2FybntiYWNrZ3JvdW5kLWNvbG9yOiNmMzdiMWR9LnRyYi1ncmltYWNle2JhY2tncm91bmQtY29sb3I6IzgwNThhNX0udHJiLXByaW1lLnRyYi1pbmZve2JhY2tncm91bmQtY29sb3I6IzAzY30udHJiLXByaW1lLnRyYi1lcnJvcntiYWNrZ3JvdW5kLWNvbG9yOnJlZH0udHJiLXByaW1lLnRyYi1zdWNjZXNze2JhY2tncm91bmQtY29sb3I6IzBjMH0udHJiLXByaW1lLnRyYi13YXJue2JhY2tncm91bmQtY29sb3I6I2Y5MH0udHJiLXByaW1lLnRyYi1ncmltYWNle2JhY2tncm91bmQtY29sb3I6IzYwOX0udHJiLXBhc3RlbC50cmItaW5mb3tiYWNrZ3JvdW5kLWNvbG9yOiM3ZWE3ZDh9LnRyYi1wYXN0ZWwudHJiLWVycm9ye2JhY2tncm91bmQtY29sb3I6I2Y2OTg5ZH0udHJiLXBhc3RlbC50cmItc3VjY2Vzc3tiYWNrZ3JvdW5kLWNvbG9yOiM4MmNhOWR9LnRyYi1wYXN0ZWwudHJiLXdhcm57YmFja2dyb3VuZC1jb2xvcjojZmRjNjhhfS50cmItcGFzdGVsLnRyYi1ncmltYWNle2JhY2tncm91bmQtY29sb3I6I2ExODdiZX0udHJiLXBpdGNoeS50cmItaW5mb3tiYWNrZ3JvdW5kLWNvbG9yOiMwMDM0NzF9LnRyYi1waXRjaHkudHJiLWVycm9ye2JhY2tncm91bmQtY29sb3I6IzllMGIwZn0udHJiLXBpdGNoeS50cmItc3VjY2Vzc3tiYWNrZ3JvdW5kLWNvbG9yOiMwMDcyMzZ9LnRyYi1waXRjaHkudHJiLXdhcm57YmFja2dyb3VuZC1jb2xvcjojYTM2MjA5fS50cmItcGl0Y2h5LnRyYi1ncmltYWNle2JhY2tncm91bmQtY29sb3I6IzQ0MGU2Mn1gXSxcbiAgYW5pbWF0aW9uczogW1xuICAgIHRyaWdnZXIoJ3Nocmlua091dCcsIFtcbiAgICAgIHN0YXRlKCdzaG93Jywgc3R5bGUoe1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9KSksXG4gICAgICBzdGF0ZSgnaGlkZScsIHN0eWxlKHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfSkpLFxuICAgICAgdHJhbnNpdGlvbignc2hvdyA9PiBoaWRlJywgYW5pbWF0ZSgnNzAwbXMgZWFzZS1vdXQnKSksXG4gICAgICB0cmFuc2l0aW9uKCcqID0+IHNob3cnLCBhbmltYXRlKCc3MDBtcyBlYXNlLW91dCcpKVxuICAgIF0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmc2Tm90aWZ5UG9wdXBDb21wb25lbnQge1xuICBASW5wdXQoKSBwb3NpdGlvbjogc3RyaW5nO1xuICBASW5wdXQoKSBkdXJhdGlvbjogbnVtYmVyO1xuICBASW5wdXQoKSB0eXBlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIG5vdGlmeVRleHQ6IHN0cmluZztcbiAgQElucHV0KCkgZmFkZTogc3RyaW5nO1xuICBASW5wdXQoKSBzdGlja3k6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGxvY2F0aW9uOiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBkZXN0cm95Q29tcG9uZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIHB1YmxpYyBkaXNtaXNzKCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveUNvbXBvbmVudC5lbWl0KHRydWUpO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBBcHBsaWNhdGlvblJlZixcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBDb21wb25lbnRSZWYsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgSW5qZWN0YWJsZSxcbiAgSW5qZWN0b3IsXG4gIFR5cGVcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENvbXBvbmVudEluamVjdFNlcnZpY2Uge1xuICBwcml2YXRlIF9jb250YWluZXI6IENvbXBvbmVudFJlZjxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYXBwbGljYXRpb25SZWY6IEFwcGxpY2F0aW9uUmVmLFxuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gIH1cblxuICBnZXRSb290Vmlld0NvbnRhaW5lcigpOiBDb21wb25lbnRSZWY8YW55PiB7XG4gICAgaWYgKHRoaXMuX2NvbnRhaW5lcikgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcblxuICAgIGNvbnN0IHJvb3RDb21wb25lbnRzID0gdGhpcy5hcHBsaWNhdGlvblJlZi5jb21wb25lbnRzO1xuICAgIGlmIChyb290Q29tcG9uZW50cy5sZW5ndGgpIHJldHVybiByb290Q29tcG9uZW50c1swXTtcblxuICAgIHRocm93IG5ldyBFcnJvcignVmlldyBDb250YWluZXIgbm90IGZvdW5kISBuZ1VwZ3JhZGUgbmVlZHMgdG8gbWFudWFsbHkgc2V0IHRoaXMgdmlhIHNldFJvb3RWaWV3Q29udGFpbmVyLicpO1xuICB9XG5cbiAgc2V0Um9vdFZpZXdDb250YWluZXIoY29udGFpbmVyOiBDb21wb25lbnRSZWY8YW55Pik6IHZvaWQge1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgfVxuXG4gIGdldENvbXBvbmVudFJvb3ROb2RlKGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4pOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIChjb21wb25lbnRSZWYuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmPGFueT4pLnJvb3ROb2Rlc1swXSBhcyBIVE1MRWxlbWVudDtcbiAgfVxuXG4gIGdldFJvb3RWaWV3Q29udGFpbmVyTm9kZSgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50Um9vdE5vZGUodGhpcy5nZXRSb290Vmlld0NvbnRhaW5lcigpKTtcbiAgfVxuXG4gIHByb2plY3RDb21wb25lbnRJbnB1dHMoY29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55Piwgb3B0aW9uczogYW55KTogQ29tcG9uZW50UmVmPGFueT4ge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9wdGlvbnMpO1xuICAgICAgZm9yIChjb25zdCBwcm9wIG9mIHByb3BzKSB7XG4gICAgICAgIGNvbXBvbmVudC5pbnN0YW5jZVtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfVxuXG4gIGFwcGVuZENvbXBvbmVudFRvQm9keTxUPihcbiAgICBjb21wb25lbnRDbGFzczogVHlwZTxUPixcbiAgICBvcHRpb25zOiBhbnkgPSB7fSxcbiAgICBsb2NhdGlvbjogRWxlbWVudFxuICApOiBDb21wb25lbnRSZWY8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ29tcG9uZW50KGNvbXBvbmVudENsYXNzLCBvcHRpb25zLCB0aGlzLmdldFJvb3RWaWV3Q29udGFpbmVyTm9kZSgpKVxuICB9XG5cbiAgYXBwZW5kQ29tcG9uZW50PFQ+KFxuICAgIGNvbXBvbmVudENsYXNzOiBUeXBlPFQ+LFxuICAgIG9wdGlvbnM6IGFueSA9IHt9LFxuICAgIGxvY2F0aW9uOiBFbGVtZW50XG4gICk6IENvbXBvbmVudFJlZjxhbnk+IHtcblxuICAgIGxldCBjb21wb25lbnRGYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50Q2xhc3MpO1xuICAgIGxldCBjb21wb25lbnRSZWYgPSBjb21wb25lbnRGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcbiAgICBsZXQgYXBwUmVmOiBhbnkgPSB0aGlzLmFwcGxpY2F0aW9uUmVmO1xuICAgIGxldCBjb21wb25lbnRSb290Tm9kZSA9IHRoaXMuZ2V0Q29tcG9uZW50Um9vdE5vZGUoY29tcG9uZW50UmVmKTtcblxuICAgIC8vIHByb2plY3QgdGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSBjb21wb25lbnQgaW5zdGFuY2VcbiAgICB0aGlzLnByb2plY3RDb21wb25lbnRJbnB1dHMoY29tcG9uZW50UmVmLCBvcHRpb25zKTtcblxuICAgIC8vIEFwcGxpY2F0aW9uUmVmJ3MgYXR0YWNoVmlldyBhbmQgZGV0YWNoVmlldyBtZXRob2RzIGFyZSBpbiBBbmd1bGFyIF4yLjIuMSBidXQgbm90IGJlZm9yZS5cbiAgICAvLyBUaGUgYGVsc2VgIGNsYXVzZSBoZXJlIGNhbiBiZSByZW1vdmVkIG9uY2UgMi4yLjEgaXMgcmVsZWFzZWQuXG4gICAgaWYgKGFwcFJlZlsnYXR0YWNoVmlldyddKSB7XG4gICAgICBhcHBSZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXG4gICAgICBjb21wb25lbnRSZWYub25EZXN0cm95KCgpID0+IHtcbiAgICAgICAgYXBwUmVmLmRldGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXaGVuIGNyZWF0aW5nIGEgY29tcG9uZW50IG91dHNpZGUgb2YgYSBWaWV3Q29udGFpbmVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHJlZ2lzdGVyXG4gICAgICAvLyBpdHMgQ2hhbmdlRGV0ZWN0b3Igd2l0aCB0aGUgYXBwbGljYXRpb24uIFRoaXMgQVBJIGlzIHVuZm9ydHVuYXRlbHkgbm90IHB1Ymxpc2hlZFxuICAgICAgLy8gaW4gQW5ndWxhciA8PSAyLjIuMC4gVGhlIGNoYW5nZSBkZXRlY3RvciBtdXN0IGFsc28gYmUgZGVyZWdpc3RlcmVkIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgLy8gaXMgZGVzdHJveWVkIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLlxuICAgICAgbGV0IGNoYW5nZURldGVjdG9yUmVmID0gY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmO1xuICAgICAgYXBwUmVmLnJlZ2lzdGVyQ2hhbmdlRGV0ZWN0b3IoY2hhbmdlRGV0ZWN0b3JSZWYpO1xuXG4gICAgICBjb21wb25lbnRSZWYub25EZXN0cm95KCgpID0+IHtcbiAgICAgICAgYXBwUmVmLnVucmVnaXN0ZXJDaGFuZ2VEZXRlY3RvcihjaGFuZ2VEZXRlY3RvclJlZik7XG5cbiAgICAgICAgLy8gTm9ybWFsbHkgdGhlIFZpZXdDb250YWluZXIgd2lsbCByZW1vdmUgdGhlIGNvbXBvbmVudCdzIG5vZGVzIGZyb20gdGhlIERPTS5cbiAgICAgICAgLy8gV2l0aG91dCBhIFZpZXdDb250YWluZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgcmVtb3ZlIHRoZSBub2Rlcy5cbiAgICAgICAgaWYgKGNvbXBvbmVudFJvb3ROb2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjb21wb25lbnRSb290Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbXBvbmVudFJvb3ROb2RlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbG9jYXRpb24uYXBwZW5kQ2hpbGQoY29tcG9uZW50Um9vdE5vZGUpO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudFJlZjtcbiAgfVxuXG4gIGRlc3Ryb3lDb21wb25lbnQoY29tcFJlZjogQ29tcG9uZW50UmVmPGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLmFwcGxpY2F0aW9uUmVmLmRldGFjaFZpZXcoY29tcFJlZi5ob3N0Vmlldyk7XG4gICAgY29tcFJlZi5kZXN0cm95KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudFJlZiwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uQ29uZmlnIH0gZnJvbSAnLi4vbm90aWZpY2F0aW9uQ29uZmlnJztcbmltcG9ydCB7IE5nNk5vdGlmeVBvcHVwQ29tcG9uZW50IH0gZnJvbSAnLi4vbmc2LW5vdGlmeS1wb3B1cC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50SW5qZWN0U2VydmljZSB9IGZyb20gJy4vY29tcG9uZW50LWluamVjdC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmc2Tm90aWZ5UG9wdXBTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBkZWZhdWx0Q29uZmlnVmFyOiBOb3RpZmljYXRpb25Db25maWcgPSBuZXcgTm90aWZpY2F0aW9uQ29uZmlnKCdib3R0b20nLCAzMDAwLCAnZXJyb3InLCAnYm9keScsIGZhbHNlLCAnJyk7XG4gIHByaXZhdGUgYWN0aXZlTm90aWZpY2F0aW9uQ29tcFJlZjogQ29tcG9uZW50UmVmPGFueT47XG4gIHByaXZhdGUgY2xlYXJ0aW1lOiBudW1iZXI7XG4gIHByaXZhdGUgY2xlYXJoaWRlOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21wSW5qZWN0OiBDb21wb25lbnRJbmplY3RTZXJ2aWNlKSB7XG4gIH1cblxuICBwdWJsaWMgZGVmYXVsdENvbmZpZyhjb25maWdPYmplY3Q6IE9iamVjdCk6IHZvaWQge1xuICAgIHRoaXMuc2V0Q29uZmlnKGNvbmZpZ09iamVjdCwgdGhpcy5kZWZhdWx0Q29uZmlnVmFyKTtcblxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xlYXJ0aW1lKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5jbGVhcmhpZGUpO1xuICAgIGlmICh0aGlzLmFjdGl2ZU5vdGlmaWNhdGlvbkNvbXBSZWYpIHtcbiAgICAgIHRoaXMuY29tcEluamVjdC5kZXN0cm95Q29tcG9uZW50KHRoaXMuYWN0aXZlTm90aWZpY2F0aW9uQ29tcFJlZik7XG4gICAgICB0aGlzLmFjdGl2ZU5vdGlmaWNhdGlvbkNvbXBSZWYgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzaG93KG5vdGlmaWNhdGlvblRleHQ6IHN0cmluZywgbm90aWZpY2F0aW9uQ29uZmlnPzogT2JqZWN0KTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gICAgbGV0IGNvbmZpZzogTm90aWZpY2F0aW9uQ29uZmlnID0gbmV3IE5vdGlmaWNhdGlvbkNvbmZpZyh0aGlzLmRlZmF1bHRDb25maWdWYXIucG9zaXRpb24sIHRoaXMuZGVmYXVsdENvbmZpZ1Zhci5kdXJhdGlvbiwgdGhpcy5kZWZhdWx0Q29uZmlnVmFyLnR5cGUsIHRoaXMuZGVmYXVsdENvbmZpZ1Zhci5sb2NhdGlvbiwgdGhpcy5kZWZhdWx0Q29uZmlnVmFyLnN0aWNreSwgbm90aWZpY2F0aW9uVGV4dCk7XG4gICAgaWYgKG5vdGlmaWNhdGlvbkNvbmZpZyAhPSB1bmRlZmluZWQgJiYgbm90aWZpY2F0aW9uQ29uZmlnICE9IG51bGwpXG4gICAgICB0aGlzLnNldENvbmZpZyhub3RpZmljYXRpb25Db25maWcsIGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5sb2NhdGlvbiA9PSAnYm9keScpXG4gICAgICB0aGlzLmFjdGl2ZU5vdGlmaWNhdGlvbkNvbXBSZWYgPSB0aGlzLmNvbXBJbmplY3QuYXBwZW5kQ29tcG9uZW50VG9Cb2R5KE5nNk5vdGlmeVBvcHVwQ29tcG9uZW50LCBjb25maWcsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKSk7XG4gICAgZWxzZVxuICAgICAgdGhpcy5hY3RpdmVOb3RpZmljYXRpb25Db21wUmVmID0gdGhpcy5jb21wSW5qZWN0LmFwcGVuZENvbXBvbmVudChOZzZOb3RpZnlQb3B1cENvbXBvbmVudCwgY29uZmlnLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5sb2NhdGlvbikpO1xuXG4gICAgdGhpcy5hY3RpdmVOb3RpZmljYXRpb25Db21wUmVmLmluc3RhbmNlLmZhZGUgPSAnc2hvdyc7XG5cbiAgICBpZiAoIXRoaXMuYWN0aXZlTm90aWZpY2F0aW9uQ29tcFJlZi5pbnN0YW5jZS5zdGlja3kpIHtcbiAgICAgIHRoaXMuY2xlYXJ0aW1lID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmFjdGl2ZU5vdGlmaWNhdGlvbkNvbXBSZWYuaW5zdGFuY2UuZmFkZSA9ICdoaWRlJztcbiAgICAgICAgdGhpcy5jbGVhcmhpZGUgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIH0sIDcwMClcbiAgICAgIH0sIGNvbmZpZy5kdXJhdGlvbik7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgIHRoaXMuYWN0aXZlTm90aWZpY2F0aW9uQ29tcFJlZi5pbnN0YW5jZS5kZXN0cm95Q29tcG9uZW50LnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5hY3RpdmVOb3RpZmljYXRpb25Db21wUmVmLmluc3RhbmNlLmZhZGUgPSAnaGlkZSc7XG4gICAgICAgIHRoaXMuY2xlYXJoaWRlID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB9LCA3MDApXG4gICAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0Q29uZmlnKGNvbmZpZ09iamVjdDogT2JqZWN0LCB0YXJnZXRPYmplY3Q6IE5vdGlmaWNhdGlvbkNvbmZpZyk6IHZvaWQge1xuICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY29uZmlnT2JqZWN0KTtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcHMpIHtcbiAgICAgICg8YW55PnRhcmdldE9iamVjdClbcHJvcF0gPSAoPGFueT5jb25maWdPYmplY3QpW3Byb3BdO1xuICAgIH1cblxuICB9XG59XG4iLCJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmc2Tm90aWZ5UG9wdXBDb21wb25lbnQgfSBmcm9tICcuL25nNi1ub3RpZnktcG9wdXAuY29tcG9uZW50JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDb21wb25lbnRJbmplY3RTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9jb21wb25lbnQtaW5qZWN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTmc2Tm90aWZ5UG9wdXBTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9uZzYtbm90aWZ5LXBvcHVwLnNlcnZpY2UnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIEJyb3dzZXJBbmltYXRpb25zTW9kdWxlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE5nNk5vdGlmeVBvcHVwQ29tcG9uZW50XG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIENvbXBvbmVudEluamVjdFNlcnZpY2VcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgTmc2Tm90aWZ5UG9wdXBDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZzZOb3RpZnlQb3B1cE1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmc2Tm90aWZ5UG9wdXBNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgTmc2Tm90aWZ5UG9wdXBTZXJ2aWNlLFxuICAgICAgICBDb21wb25lbnRJbmplY3RTZXJ2aWNlXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInRzbGliXzEuX192YWx1ZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFBO0lBT0UsNEJBQVksUUFBZ0IsRUFBRSxRQUFnQixFQUFFLElBQVksRUFBRSxRQUFnQixFQUFFLE1BQWUsRUFBRSxVQUFrQjtRQUNqSCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJ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