(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/animations'), require('@angular/common'), require('@angular/platform-browser/animations')) :
    typeof define === 'function' && define.amd ? define('ng6-notify-popup', ['exports', '@angular/core', '@angular/animations', '@angular/common', '@angular/platform-browser/animations'], factory) :
    (factory((global['ng6-notify-popup'] = {}),global.ng.core,global.ng.animations,global.ng.common,global.ng.platformBrowser.animations));
}(this, (function (exports,i0,animations,common,animations$1) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NotificationConfig = (function () {
        function NotificationConfig(position, duration, type, location, sticky, notifyText) {
            this.position = position;
            this.duration = duration;
            this.type = type;
            this.location = location;
            this.sticky = sticky;
            this.notifyText = notifyText;
        }
        return NotificationConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Ng6NotifyPopupComponent = (function () {
        function Ng6NotifyPopupComponent() {
            this.destroyComponent = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        Ng6NotifyPopupComponent.prototype.dismiss = /**
         * @return {?}
         */
            function () {
                this.destroyComponent.emit(true);
            };
        Ng6NotifyPopupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'notify',
                        template: "\n    <div [@shrinkOut]=\"fade\" class=\"trb-notify {{'trb-' + type}}\"\n         [ngClass]=\"{'trb-top': position=='top','trb-bottom':position=='bottom','trb-fixed':location=='body','trb-absolute':location!='body','trb-sticky':sticky==true}\">\n      <span class=\"trb-message\">{{notifyText}}</span>\n      <span class=\"trb-dismiss\" (click)=\"dismiss()\">\u00D7</span>\n    </div>",
                        styles: [".trb-notify{color:#fff;cursor:default;font-size:1.3em;left:0;opacity:0;padding:25px 80px;right:0;display:block;text-align:center;user-select:none;z-index:9999;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none}.trb-component{position:absolute}.trb-top{top:0}.trb-bottom{bottom:0}.trb-fixed{position:fixed}.trb-absolute{position:absolute}.trb-dismiss{background-color:#333;border-radius:15px;box-shadow:inset 2px 2px 7px 2px #000;color:#ddd;cursor:pointer;display:none;font-size:1.25em;font-weight:700;height:30px;line-height:30px;opacity:.2;position:absolute;right:40px;text-shadow:1px 1px 5px #000;top:25px;width:30px}.trb-sticky .trb-dismiss{display:block}.trb-dismiss:hover{background-color:#000}.trb-dismiss:active{background-color:#666}@media only screen and (max-width:480px){.trb-notify{font-size:1em;padding:12px 25px}.trb-dismiss{font-size:1em;height:20px;line-height:20px;right:5px;top:5px;width:20px}}.trb-info{background-color:#0e90d2}.trb-error{background-color:#dd514c}.trb-success{background-color:#5eb95e}.trb-warn{background-color:#f37b1d}.trb-grimace{background-color:#8058a5}.trb-prime.trb-info{background-color:#03c}.trb-prime.trb-error{background-color:red}.trb-prime.trb-success{background-color:#0c0}.trb-prime.trb-warn{background-color:#f90}.trb-prime.trb-grimace{background-color:#609}.trb-pastel.trb-info{background-color:#7ea7d8}.trb-pastel.trb-error{background-color:#f6989d}.trb-pastel.trb-success{background-color:#82ca9d}.trb-pastel.trb-warn{background-color:#fdc68a}.trb-pastel.trb-grimace{background-color:#a187be}.trb-pitchy.trb-info{background-color:#003471}.trb-pitchy.trb-error{background-color:#9e0b0f}.trb-pitchy.trb-success{background-color:#007236}.trb-pitchy.trb-warn{background-color:#a36209}.trb-pitchy.trb-grimace{background-color:#440e62}"],
                        animations: [
                            animations.trigger('shrinkOut', [
                                animations.state('show', animations.style({
                                    opacity: 1
                                })),
                                animations.state('hide', animations.style({
                                    opacity: 0
                                })),
                                animations.transition('show => hide', animations.animate('700ms ease-out')),
                                animations.transition('* => show', animations.animate('700ms ease-out'))
                            ])
                        ]
                    },] },
        ];
        Ng6NotifyPopupComponent.propDecorators = {
            position: [{ type: i0.Input }],
            duration: [{ type: i0.Input }],
            type: [{ type: i0.Input }],
            notifyText: [{ type: i0.Input }],
            fade: [{ type: i0.Input }],
            sticky: [{ type: i0.Input }],
            location: [{ type: i0.Input }],
            destroyComponent: [{ type: i0.Output }]
        };
        return Ng6NotifyPopupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ComponentInjectService = (function () {
        function ComponentInjectService(applicationRef, componentFactoryResolver, injector) {
            this.applicationRef = applicationRef;
            this.componentFactoryResolver = componentFactoryResolver;
            this.injector = injector;
        }
        /**
         * @return {?}
         */
        ComponentInjectService.prototype.getRootViewContainer = /**
         * @return {?}
         */
            function () {
                if (this._container)
                    return this._container;
                /** @type {?} */
                var rootComponents = this.applicationRef.components;
                if (rootComponents.length)
                    return rootComponents[0];
                throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer.');
            };
        /**
         * @param {?} container
         * @return {?}
         */
        ComponentInjectService.prototype.setRootViewContainer = /**
         * @param {?} container
         * @return {?}
         */
            function (container) {
                this._container = container;
            };
        /**
         * @param {?} componentRef
         * @return {?}
         */
        ComponentInjectService.prototype.getComponentRootNode = /**
         * @param {?} componentRef
         * @return {?}
         */
            function (componentRef) {
                return /** @type {?} */ (((componentRef.hostView)).rootNodes[0]);
            };
        /**
         * @return {?}
         */
        ComponentInjectService.prototype.getRootViewContainerNode = /**
         * @return {?}
         */
            function () {
                return this.getComponentRootNode(this.getRootViewContainer());
            };
        /**
         * @param {?} component
         * @param {?} options
         * @return {?}
         */
        ComponentInjectService.prototype.projectComponentInputs = /**
         * @param {?} component
         * @param {?} options
         * @return {?}
         */
            function (component, options) {
                if (options) {
                    /** @type {?} */
                    var props = Object.getOwnPropertyNames(options);
                    try {
                        for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                            var prop = props_1_1.value;
                            component.instance[prop] = options[prop];
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (props_1_1 && !props_1_1.done && (_a = props_1.return))
                                _a.call(props_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
                return component;
                var e_1, _a;
            };
        /**
         * @template T
         * @param {?} componentClass
         * @param {?=} options
         * @param {?=} location
         * @return {?}
         */
        ComponentInjectService.prototype.appendComponentToBody = /**
         * @template T
         * @param {?} componentClass
         * @param {?=} options
         * @param {?=} location
         * @return {?}
         */
            function (componentClass, options, location) {
                if (options === void 0) {
                    options = {};
                }
                return this.appendComponent(componentClass, options, this.getRootViewContainerNode());
            };
        /**
         * @template T
         * @param {?} componentClass
         * @param {?=} options
         * @param {?=} location
         * @return {?}
         */
        ComponentInjectService.prototype.appendComponent = /**
         * @template T
         * @param {?} componentClass
         * @param {?=} options
         * @param {?=} location
         * @return {?}
         */
            function (componentClass, options, location) {
                if (options === void 0) {
                    options = {};
                }
                /** @type {?} */
                var componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentClass);
                /** @type {?} */
                var componentRef = componentFactory.create(this.injector);
                /** @type {?} */
                var appRef = this.applicationRef;
                /** @type {?} */
                var componentRootNode = this.getComponentRootNode(componentRef);
                // project the options passed to the component instance
                this.projectComponentInputs(componentRef, options);
                // ApplicationRef's attachView and detachView methods are in Angular ^2.2.1 but not before.
                // The `else` clause here can be removed once 2.2.1 is released.
                if (appRef['attachView']) {
                    appRef.attachView(componentRef.hostView);
                    componentRef.onDestroy(function () {
                        appRef.detachView(componentRef.hostView);
                    });
                }
                else {
                    /** @type {?} */
                    var changeDetectorRef_1 = componentRef.changeDetectorRef;
                    appRef.registerChangeDetector(changeDetectorRef_1);
                    componentRef.onDestroy(function () {
                        appRef.unregisterChangeDetector(changeDetectorRef_1);
                        // Normally the ViewContainer will remove the component's nodes from the DOM.
                        // Without a ViewContainer, we need to manually remove the nodes.
                        if (componentRootNode.parentNode) {
                            componentRootNode.parentNode.removeChild(componentRootNode);
                        }
                    });
                }
                location.appendChild(componentRootNode);
                return componentRef;
            };
        /**
         * @param {?} compRef
         * @return {?}
         */
        ComponentInjectService.prototype.destroyComponent = /**
         * @param {?} compRef
         * @return {?}
         */
            function (compRef) {
                this.applicationRef.detachView(compRef.hostView);
                compRef.destroy();
            };
        ComponentInjectService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        ComponentInjectService.ctorParameters = function () {
            return [
                { type: i0.ApplicationRef },
                { type: i0.ComponentFactoryResolver },
                { type: i0.Injector }
            ];
        };
        /** @nocollapse */ ComponentInjectService.ngInjectableDef = i0.defineInjectable({ factory: function ComponentInjectService_Factory() { return new ComponentInjectService(i0.inject(i0.ApplicationRef), i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR)); }, token: ComponentInjectService, providedIn: "root" });
        return ComponentInjectService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Ng6NotifyPopupService = (function () {
        function Ng6NotifyPopupService(compInject) {
            this.compInject = compInject;
            this.defaultConfigVar = new NotificationConfig('bottom', 3000, 'error', 'body', false, '');
        }
        /**
         * @param {?} configObject
         * @return {?}
         */
        Ng6NotifyPopupService.prototype.defaultConfig = /**
         * @param {?} configObject
         * @return {?}
         */
            function (configObject) {
                this.setConfig(configObject, this.defaultConfigVar);
            };
        /**
         * @return {?}
         */
        Ng6NotifyPopupService.prototype.destroy = /**
         * @return {?}
         */
            function () {
                clearTimeout(this.cleartime);
                clearTimeout(this.clearhide);
                if (this.activeNotificationCompRef) {
                    this.compInject.destroyComponent(this.activeNotificationCompRef);
                    this.activeNotificationCompRef = null;
                }
            };
        /**
         * @param {?} notificationText
         * @param {?=} notificationConfig
         * @return {?}
         */
        Ng6NotifyPopupService.prototype.show = /**
         * @param {?} notificationText
         * @param {?=} notificationConfig
         * @return {?}
         */
            function (notificationText, notificationConfig) {
                var _this = this;
                this.destroy();
                /** @type {?} */
                var config = new NotificationConfig(this.defaultConfigVar.position, this.defaultConfigVar.duration, this.defaultConfigVar.type, this.defaultConfigVar.location, this.defaultConfigVar.sticky, notificationText);
                if (notificationConfig != undefined && notificationConfig != null)
                    this.setConfig(notificationConfig, config);
                if (config.location == 'body')
                    this.activeNotificationCompRef = this.compInject.appendComponentToBody(Ng6NotifyPopupComponent, config, document.querySelector('body'));
                else
                    this.activeNotificationCompRef = this.compInject.appendComponent(Ng6NotifyPopupComponent, config, document.querySelector(config.location));
                this.activeNotificationCompRef.instance.fade = 'show';
                if (!this.activeNotificationCompRef.instance.sticky) {
                    this.cleartime = window.setTimeout(function () {
                        _this.activeNotificationCompRef.instance.fade = 'hide';
                        _this.clearhide = window.setTimeout(function () {
                            _this.destroy();
                        }, 700);
                    }, config.duration);
                }
                else
                    this.activeNotificationCompRef.instance.destroyComponent.subscribe(function (value) {
                        _this.activeNotificationCompRef.instance.fade = 'hide';
                        _this.clearhide = window.setTimeout(function () {
                            _this.destroy();
                        }, 700);
                    });
            };
        /**
         * @param {?} configObject
         * @param {?} targetObject
         * @return {?}
         */
        Ng6NotifyPopupService.prototype.setConfig = /**
         * @param {?} configObject
         * @param {?} targetObject
         * @return {?}
         */
            function (configObject, targetObject) {
                /** @type {?} */
                var props = Object.getOwnPropertyNames(configObject);
                try {
                    for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                        var prop = props_1_1.value;
                        ((targetObject))[prop] = ((configObject))[prop];
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (props_1_1 && !props_1_1.done && (_a = props_1.return))
                            _a.call(props_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                var e_1, _a;
            };
        Ng6NotifyPopupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        Ng6NotifyPopupService.ctorParameters = function () {
            return [
                { type: ComponentInjectService }
            ];
        };
        /** @nocollapse */ Ng6NotifyPopupService.ngInjectableDef = i0.defineInjectable({ factory: function Ng6NotifyPopupService_Factory() { return new Ng6NotifyPopupService(i0.inject(ComponentInjectService)); }, token: Ng6NotifyPopupService, providedIn: "root" });
        return Ng6NotifyPopupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var Ng6NotifyPopupModule = (function () {
        function Ng6NotifyPopupModule() {
        }
        /**
         * @return {?}
         */
        Ng6NotifyPopupModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: Ng6NotifyPopupModule,
                    providers: [
                        Ng6NotifyPopupService,
                        ComponentInjectService
                    ]
                };
            };
        Ng6NotifyPopupModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            animations$1.BrowserAnimationsModule
                        ],
                        declarations: [
                            Ng6NotifyPopupComponent
                        ],
                        providers: [
                            ComponentInjectService
                        ],
                        entryComponents: [
                            Ng6NotifyPopupComponent
                        ]
                    },] },
        ];
        return Ng6NotifyPopupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.Ng6NotifyPopupService = Ng6NotifyPopupService;
    exports.ComponentInjectService = ComponentInjectService;
    exports.Ng6NotifyPopupComponent = Ng6NotifyPopupComponent;
    exports.Ng6NotifyPopupModule = Ng6NotifyPopupModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,